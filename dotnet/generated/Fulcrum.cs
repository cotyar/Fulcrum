// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: fulcrum.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Fulcrum {

  /// <summary>Holder for reflection information generated from fulcrum.proto</summary>
  public static partial class FulcrumReflection {

    #region Descriptor
    /// <summary>File descriptor for fulcrum.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FulcrumReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1mdWxjcnVtLnByb3RvEgdmdWxjcnVtGh9nb29nbGUvcHJvdG9idWYvdGlt",
            "ZXN0YW1wLnByb3RvIvADCg1JbnRlcm5hbEVycm9yEiEKF21pc3NpbmdSZXF1",
            "aXJlZEFyZ3VtZW50GAEgASgJSAASRwoZc3RvcmFnZVZhbHVlRW5jb2RpbmdF",
            "cnJvchgCIAEoCzIiLmZ1bGNydW0uSW50ZXJuYWxFcnJvci5FbmNvZGVFcnJv",
            "ckgAEkcKGXN0b3JhZ2VWYWx1ZURlY29kaW5nRXJyb3IYAyABKAsyIi5mdWxj",
            "cnVtLkludGVybmFsRXJyb3IuRGVjb2RlRXJyb3JIABIWCgxzdG9yYWdlRXJy",
            "b3IYBCABKAlIABIcChJ0cmFuc2FjdGlvbkFib3J0ZWQYBSABKAlIABISCghr",
            "ZXlFcnJvchgGIAEoCUgAEhQKCnZhbHVlRXJyb3IYByABKAlIABoyCgtFbmNv",
            "ZGVFcnJvchIQCghyZXF1aXJlZBgBIAEoBBIRCglyZW1haW5pbmcYAiABKAQa",
            "jAEKC0RlY29kZUVycm9yEhMKC2Rlc2NyaXB0aW9uGAEgASgJEjsKBXN0YWNr",
            "GAIgAygLMiwuZnVsY3J1bS5JbnRlcm5hbEVycm9yLkRlY29kZUVycm9yLlN0",
            "YWNrTGluZRorCglTdGFja0xpbmUSDwoHbWVzc2FnZRgBIAEoCRINCgVmaWVs",
            "ZBgCIAEoCUIHCgVDYXVzZSIZCgZDZG5VaWQSDwoHbWVzc2FnZRgBIAEoCSJ4",
            "CghDZG5WYWx1ZRIPCgVieXRlcxgGIAEoDEgAEigKBWJhdGNoGAogASgLMhcu",
            "ZnVsY3J1bS5DZG5WYWx1ZS5CYXRjaEgAGiYKBUJhdGNoEh0KBHVpZHMYASAD",
            "KAsyDy5mdWxjcnVtLkNkblVpZEIJCgdtZXNzYWdlIk0KC0NkbktleVZhbHVl",
            "EhwKA2tleRgBIAEoCzIPLmZ1bGNydW0uQ2RuVWlkEiAKBXZhbHVlGAIgASgL",
            "MhEuZnVsY3J1bS5DZG5WYWx1ZSItCg1DZG5HZXRSZXF1ZXN0EhwKA3VpZBgB",
            "IAEoCzIPLmZ1bGNydW0uQ2RuVWlkIowBCg5DZG5HZXRSZXNwb25zZRIkCgdz",
            "dWNjZXNzGAEgASgLMhEuZnVsY3J1bS5DZG5WYWx1ZUgAEiMKCG5vdEZvdW5k",
            "GAIgASgLMg8uZnVsY3J1bS5DZG5VaWRIABInCgVlcnJvchhkIAEoCzIWLmZ1",
            "bGNydW0uSW50ZXJuYWxFcnJvckgAQgYKBFJlc3AiMgoSQ2RuQ29udGFpbnNS",
            "ZXF1ZXN0EhwKA3VpZBgBIAEoCzIPLmZ1bGNydW0uQ2RuVWlkIlkKE0NkbkNv",
            "bnRhaW5zUmVzcG9uc2USEQoHc3VjY2VzcxgBIAEoCEgAEicKBWVycm9yGGQg",
            "ASgLMhYuZnVsY3J1bS5JbnRlcm5hbEVycm9ySABCBgoEUmVzcCKXAQoWQ2Ru",
            "U3RyZWFtVmFsdWVSZXNwb25zZRInCgdzdWNjZXNzGAEgASgLMhQuZnVsY3J1",
            "bS5DZG5LZXlWYWx1ZUgAEiMKCG5vdEZvdW5kGAIgASgLMg8uZnVsY3J1bS5D",
            "ZG5VaWRIABInCgVlcnJvchhkIAEoCzIWLmZ1bGNydW0uSW50ZXJuYWxFcnJv",
            "ckgAQgYKBFJlc3AiTwoNQ2RuQWRkUmVxdWVzdBIcCgN1aWQYASABKAsyDy5m",
            "dWxjcnVtLkNkblVpZBIgCgV2YWx1ZRgCIAEoCzIRLmZ1bGNydW0uQ2RuVmFs",
            "dWUiiAEKDkNkbkFkZFJlc3BvbnNlEiIKB3N1Y2Nlc3MYASABKAsyDy5mdWxj",
            "cnVtLkNkblVpZEgAEiEKBmV4aXN0cxgCIAEoCzIPLmZ1bGNydW0uQ2RuVWlk",
            "SAASJwoFZXJyb3IYZCABKAsyFi5mdWxjcnVtLkludGVybmFsRXJyb3JIAEIG",
            "CgRSZXNwIjAKEENkbkRlbGV0ZVJlcXVlc3QSHAoDdWlkGAEgASgLMg8uZnVs",
            "Y3J1bS5DZG5VaWQijQEKEUNkbkRlbGV0ZVJlc3BvbnNlEiIKB3N1Y2Nlc3MY",
            "ASABKAsyDy5mdWxjcnVtLkNkblVpZEgAEiMKCG5vdEZvdW5kGAIgASgLMg8u",
            "ZnVsY3J1bS5DZG5VaWRIABInCgVlcnJvchhkIAEoCzIWLmZ1bGNydW0uSW50",
            "ZXJuYWxFcnJvckgAQgYKBFJlc3AiFQoGS2V5VWlkEgsKA3NpcBgBIAEoDCIb",
            "CgxLZXlGYW1pbHlVaWQSCwoDc2lwGAEgASgMIloKA0tleRILCgNrZXkYASAB",
            "KAkSKAoJa2V5RmFtaWx5GAIgASgLMhUuZnVsY3J1bS5LZXlGYW1pbHlVaWQS",
            "HAoDdWlkGAUgASgLMg8uZnVsY3J1bS5LZXlVaWQikAIKDVZhbHVlTWV0YWRh",
            "dGESNQoKaGFzaGVkV2l0aBgBIAEoDjIhLmZ1bGNydW0uVmFsdWVNZXRhZGF0",
            "YS5IYXNoZWRXaXRoEgwKBGhhc2gYAiABKAwSNwoLY29tcHJlc3Npb24YAyAB",
            "KA4yIi5mdWxjcnVtLlZhbHVlTWV0YWRhdGEuQ29tcHJlc3Npb24SFgoOc2l6",
            "ZUNvbXByZXNzZWQYBCABKA0SEAoIc2l6ZUZ1bGwYBSABKA0SFAoMc2VyaWFs",
            "aXplcklkGAYgASgJIhUKCkhhc2hlZFdpdGgSBwoDU0lQEAAiKgoLQ29tcHJl",
            "c3Npb24SCAoETk9ORRAAEgcKA0xaNBABEggKBEdaSVAQAiLzAwoKS3ZNZXRh",
            "ZGF0YRIfCgZrZXlVaWQYASABKAsyDy5mdWxjcnVtLktleVVpZBIqCgZzdGF0",
            "dXMYAiABKA4yGi5mdWxjcnVtLkt2TWV0YWRhdGEuU3RhdHVzEioKBmV4cGly",
            "eRgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASMAoGYWN0aW9u",
            "GAYgASgOMiAuZnVsY3J1bS5Ldk1ldGFkYXRhLlVwZGF0ZUFjdGlvbhIrCglj",
            "cmVhdGVkQnkYByABKAsyGC5mdWxjcnVtLkt2TWV0YWRhdGEuVXNlchItCglj",
            "cmVhdGVkQXQYCCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhUK",
            "DWNvcnJlbGF0aW9uSWQYCSABKAkSGwoTb3JpZ2luYXRvclJlcGxpY2FJZBgK",
            "IAEoCRItCg12YWx1ZU1ldGFkYXRhGBQgASgLMhYuZnVsY3J1bS5WYWx1ZU1l",
            "dGFkYXRhGhMKBFVzZXISCwoDa2V5GAEgASgJIi4KBlN0YXR1cxIKCgZBQ1RJ",
            "VkUQABILCgdERUxFVEVEEAESCwoHRVhQSVJFRBACIjYKDFVwZGF0ZUFjdGlv",
            "bhIJCgVBRERFRBAAEgsKB1VQREFURUQQARIOCgpSRVBMSUNBVEVEEAIi3AEK",
            "ClZhbHVlRW50cnkSHwoGa2V5VWlkGAEgASgLMg8uZnVsY3J1bS5LZXlVaWQS",
            "DQoDaTMyGAIgASgFSAASDQoDaTY0GAMgASgDSAASDwoFZmxvYXQYBSABKAJI",
            "ABIQCgZkb3VibGUYBiABKAFIABINCgNzdHIYByABKAlIABIPCgVieXRlcxgI",
            "IAEoDEgAEh4KA2NkbhgKIAEoCzIPLmZ1bGNydW0uQ2RuVWlkSAASIQoGY2Ru",
            "U3RyGAsgASgLMg8uZnVsY3J1bS5DZG5VaWRIAEIJCgdtZXNzYWdlIlQKB0t2",
            "RW50cnkSJQoIbWV0YWRhdGEYASABKAsyEy5mdWxjcnVtLkt2TWV0YWRhdGES",
            "IgoFdmFsdWUYAiABKAsyEy5mdWxjcnVtLlZhbHVlRW50cnkiSwoKQWRkUmVx",
            "dWVzdBIZCgNrZXkYASABKAsyDC5mdWxjcnVtLktleRIiCgV2YWx1ZRgCIAEo",
            "CzITLmZ1bGNydW0uVmFsdWVFbnRyeSJ/CgtBZGRSZXNwb25zZRIfCgdzdWNj",
            "ZXNzGAEgASgLMgwuZnVsY3J1bS5LZXlIABIeCgZleGlzdHMYAiABKAsyDC5m",
            "dWxjcnVtLktleUgAEicKBWVycm9yGGQgASgLMhYuZnVsY3J1bS5JbnRlcm5h",
            "bEVycm9ySABCBgoEUmVzcCIqCg1EZWxldGVSZXF1ZXN0EhkKA2tleRgBIAEo",
            "CzIMLmZ1bGNydW0uS2V5IooBCg5EZWxldGVSZXNwb25zZRIiCgdzdWNjZXNz",
            "GAEgASgLMg8uZnVsY3J1bS5LZXlVaWRIABIjCghub3RGb3VuZBgCIAEoCzIP",
            "LmZ1bGNydW0uS2V5VWlkSAASJwoFZXJyb3IYZCABKAsyFi5mdWxjcnVtLklu",
            "dGVybmFsRXJyb3JIAEIGCgRSZXNwInUKC0NvcHlSZXF1ZXN0Eh0KB2tleUZy",
            "b20YASABKAsyDC5mdWxjcnVtLktleRIqCgZleHBpcnkYAiABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wEhsKBWtleVRvGAMgASgLMgwuZnVsY3J1",
            "bS5LZXkixgEKDENvcHlSZXNwb25zZRInCgdzdWNjZXNzGAEgASgLMhQuZnVs",
            "Y3J1bS5Db3B5UmVxdWVzdEgAEi8KD2Zyb21LZXlOb3RGb3VuZBgCIAEoCzIU",
            "LmZ1bGNydW0uQ29weVJlcXVlc3RIABIrCgt0b0tleUV4aXN0cxgDIAEoCzIU",
            "LmZ1bGNydW0uQ29weVJlcXVlc3RIABInCgVlcnJvchhkIAEoCzIWLmZ1bGNy",
            "dW0uSW50ZXJuYWxFcnJvckgAQgYKBFJlc3AiPwoKR2V0UmVxdWVzdBIZCgNr",
            "ZXkYASABKAsyDC5mdWxjcnVtLktleRIWCg5yZXR1cm5NZXRhZGF0YRgCIAEo",
            "CCKIAQoLR2V0UmVzcG9uc2USIwoHc3VjY2VzcxgBIAEoCzIQLmZ1bGNydW0u",
            "S3ZFbnRyeUgAEiMKCG5vdEZvdW5kGAIgASgLMg8uZnVsY3J1bS5LZXlVaWRI",
            "ABInCgVlcnJvchhkIAEoCzIWLmZ1bGNydW0uSW50ZXJuYWxFcnJvckgAQgYK",
            "BFJlc3AiLAoPQ29udGFpbnNSZXF1ZXN0EhkKA2tleRgBIAEoCzIMLmZ1bGNy",
            "dW0uS2V5IlYKEENvbnRhaW5zUmVzcG9uc2USEQoHc3VjY2VzcxgBIAEoCEgA",
            "EicKBWVycm9yGGQgASgLMhYuZnVsY3J1bS5JbnRlcm5hbEVycm9ySABCBgoE",
            "UmVzcCKCAQoNU2VhcmNoUmVxdWVzdBIRCglrZXlQcmVmaXgYASABKAkSEAoI",
            "cGFnZVNpemUYAiABKA0SDAoEcGFnZRgDIAEoDRIRCglyZXR1cm5VaWQYBCAB",
            "KAgSEwoLcmV0dXJuVmFsdWUYBSABKAgSFgoOcmV0dXJuTWV0YWRhdGEYBiAB",
            "KAgiegoSU2VhcmNoUmVzcG9uc2VJdGVtEhkKA2tleRgBIAEoCzIMLmZ1bGNy",
            "dW0uS2V5EiIKBXZhbHVlGAIgASgLMhMuZnVsY3J1bS5WYWx1ZUVudHJ5EiUK",
            "CG1ldGFkYXRhGAMgASgLMhMuZnVsY3J1bS5Ldk1ldGFkYXRhIqIBCg5TZWFy",
            "Y2hSZXNwb25zZRIuCgdzdWNjZXNzGAEgASgLMhsuZnVsY3J1bS5TZWFyY2hS",
            "ZXNwb25zZUl0ZW1IABIqCghrZXlFcnJvchhkIAEoCzIWLmZ1bGNydW0uSW50",
            "ZXJuYWxFcnJvckgAEiwKCnZhbHVlRXJyb3IYZSABKAsyFi5mdWxjcnVtLklu",
            "dGVybmFsRXJyb3JIAEIGCgRSZXNwMtkBCghDZG5RdWVyeRI4CgNHZXQSFi5m",
            "dWxjcnVtLkNkbkdldFJlcXVlc3QaFy5mdWxjcnVtLkNkbkdldFJlc3BvbnNl",
            "IgASRwoIQ29udGFpbnMSGy5mdWxjcnVtLkNkbkNvbnRhaW5zUmVxdWVzdBoc",
            "LmZ1bGNydW0uQ2RuQ29udGFpbnNSZXNwb25zZSIAEkoKC1N0cmVhbVZhbHVl",
            "EhYuZnVsY3J1bS5DZG5HZXRSZXF1ZXN0Gh8uZnVsY3J1bS5DZG5TdHJlYW1W",
            "YWx1ZVJlc3BvbnNlIgAwATKJAQoKQ2RuQ29udHJvbBI4CgNBZGQSFi5mdWxj",
            "cnVtLkNkbkFkZFJlcXVlc3QaFy5mdWxjcnVtLkNkbkFkZFJlc3BvbnNlIgAS",
            "QQoGRGVsZXRlEhkuZnVsY3J1bS5DZG5EZWxldGVSZXF1ZXN0GhouZnVsY3J1",
            "bS5DZG5EZWxldGVSZXNwb25zZSIAMugCCghEYXRhVHJlZRIyCgNBZGQSEy5m",
            "dWxjcnVtLkFkZFJlcXVlc3QaFC5mdWxjcnVtLkFkZFJlc3BvbnNlIgASNQoE",
            "Q29weRIULmZ1bGNydW0uQ29weVJlcXVlc3QaFS5mdWxjcnVtLkNvcHlSZXNw",
            "b25zZSIAEjsKBkRlbGV0ZRIWLmZ1bGNydW0uRGVsZXRlUmVxdWVzdBoXLmZ1",
            "bGNydW0uRGVsZXRlUmVzcG9uc2UiABIyCgNHZXQSEy5mdWxjcnVtLkdldFJl",
            "cXVlc3QaFC5mdWxjcnVtLkdldFJlc3BvbnNlIgASQQoIQ29udGFpbnMSGC5m",
            "dWxjcnVtLkNvbnRhaW5zUmVxdWVzdBoZLmZ1bGNydW0uQ29udGFpbnNSZXNw",
            "b25zZSIAEj0KBlNlYXJjaBIWLmZ1bGNydW0uU2VhcmNoUmVxdWVzdBoXLmZ1",
            "bGNydW0uU2VhcmNoUmVzcG9uc2UiADABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.InternalError), global::Fulcrum.InternalError.Parser, new[]{ "MissingRequiredArgument", "StorageValueEncodingError", "StorageValueDecodingError", "StorageError", "TransactionAborted", "KeyError", "ValueError" }, new[]{ "Cause" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.InternalError.Types.EncodeError), global::Fulcrum.InternalError.Types.EncodeError.Parser, new[]{ "Required", "Remaining" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.InternalError.Types.DecodeError), global::Fulcrum.InternalError.Types.DecodeError.Parser, new[]{ "Description", "Stack" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.InternalError.Types.DecodeError.Types.StackLine), global::Fulcrum.InternalError.Types.DecodeError.Types.StackLine.Parser, new[]{ "Message", "Field" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.CdnUid), global::Fulcrum.CdnUid.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.CdnValue), global::Fulcrum.CdnValue.Parser, new[]{ "Bytes", "Batch" }, new[]{ "Message" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.CdnValue.Types.Batch), global::Fulcrum.CdnValue.Types.Batch.Parser, new[]{ "Uids" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.CdnKeyValue), global::Fulcrum.CdnKeyValue.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.CdnGetRequest), global::Fulcrum.CdnGetRequest.Parser, new[]{ "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.CdnGetResponse), global::Fulcrum.CdnGetResponse.Parser, new[]{ "Success", "NotFound", "Error" }, new[]{ "Resp" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.CdnContainsRequest), global::Fulcrum.CdnContainsRequest.Parser, new[]{ "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.CdnContainsResponse), global::Fulcrum.CdnContainsResponse.Parser, new[]{ "Success", "Error" }, new[]{ "Resp" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.CdnStreamValueResponse), global::Fulcrum.CdnStreamValueResponse.Parser, new[]{ "Success", "NotFound", "Error" }, new[]{ "Resp" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.CdnAddRequest), global::Fulcrum.CdnAddRequest.Parser, new[]{ "Uid", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.CdnAddResponse), global::Fulcrum.CdnAddResponse.Parser, new[]{ "Success", "Exists", "Error" }, new[]{ "Resp" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.CdnDeleteRequest), global::Fulcrum.CdnDeleteRequest.Parser, new[]{ "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.CdnDeleteResponse), global::Fulcrum.CdnDeleteResponse.Parser, new[]{ "Success", "NotFound", "Error" }, new[]{ "Resp" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.KeyUid), global::Fulcrum.KeyUid.Parser, new[]{ "Sip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.KeyFamilyUid), global::Fulcrum.KeyFamilyUid.Parser, new[]{ "Sip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.Key), global::Fulcrum.Key.Parser, new[]{ "Key_", "KeyFamily", "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.ValueMetadata), global::Fulcrum.ValueMetadata.Parser, new[]{ "HashedWith", "Hash", "Compression", "SizeCompressed", "SizeFull", "SerializerId" }, null, new[]{ typeof(global::Fulcrum.ValueMetadata.Types.HashedWith), typeof(global::Fulcrum.ValueMetadata.Types.Compression) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.KvMetadata), global::Fulcrum.KvMetadata.Parser, new[]{ "KeyUid", "Status", "Expiry", "Action", "CreatedBy", "CreatedAt", "CorrelationId", "OriginatorReplicaId", "ValueMetadata" }, null, new[]{ typeof(global::Fulcrum.KvMetadata.Types.Status), typeof(global::Fulcrum.KvMetadata.Types.UpdateAction) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.KvMetadata.Types.User), global::Fulcrum.KvMetadata.Types.User.Parser, new[]{ "Key" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.ValueEntry), global::Fulcrum.ValueEntry.Parser, new[]{ "KeyUid", "I32", "I64", "Float", "Double", "Str", "Bytes", "Cdn", "CdnStr" }, new[]{ "Message" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.KvEntry), global::Fulcrum.KvEntry.Parser, new[]{ "Metadata", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.AddRequest), global::Fulcrum.AddRequest.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.AddResponse), global::Fulcrum.AddResponse.Parser, new[]{ "Success", "Exists", "Error" }, new[]{ "Resp" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.DeleteRequest), global::Fulcrum.DeleteRequest.Parser, new[]{ "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.DeleteResponse), global::Fulcrum.DeleteResponse.Parser, new[]{ "Success", "NotFound", "Error" }, new[]{ "Resp" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.CopyRequest), global::Fulcrum.CopyRequest.Parser, new[]{ "KeyFrom", "Expiry", "KeyTo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.CopyResponse), global::Fulcrum.CopyResponse.Parser, new[]{ "Success", "FromKeyNotFound", "ToKeyExists", "Error" }, new[]{ "Resp" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.GetRequest), global::Fulcrum.GetRequest.Parser, new[]{ "Key", "ReturnMetadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.GetResponse), global::Fulcrum.GetResponse.Parser, new[]{ "Success", "NotFound", "Error" }, new[]{ "Resp" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.ContainsRequest), global::Fulcrum.ContainsRequest.Parser, new[]{ "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.ContainsResponse), global::Fulcrum.ContainsResponse.Parser, new[]{ "Success", "Error" }, new[]{ "Resp" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.SearchRequest), global::Fulcrum.SearchRequest.Parser, new[]{ "KeyPrefix", "PageSize", "Page", "ReturnUid", "ReturnValue", "ReturnMetadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.SearchResponseItem), global::Fulcrum.SearchResponseItem.Parser, new[]{ "Key", "Value", "Metadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fulcrum.SearchResponse), global::Fulcrum.SearchResponse.Parser, new[]{ "Success", "KeyError", "ValueError" }, new[]{ "Resp" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InternalError : pb::IMessage<InternalError> {
    private static readonly pb::MessageParser<InternalError> _parser = new pb::MessageParser<InternalError>(() => new InternalError());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalError(InternalError other) : this() {
      switch (other.CauseCase) {
        case CauseOneofCase.MissingRequiredArgument:
          MissingRequiredArgument = other.MissingRequiredArgument;
          break;
        case CauseOneofCase.StorageValueEncodingError:
          StorageValueEncodingError = other.StorageValueEncodingError.Clone();
          break;
        case CauseOneofCase.StorageValueDecodingError:
          StorageValueDecodingError = other.StorageValueDecodingError.Clone();
          break;
        case CauseOneofCase.StorageError:
          StorageError = other.StorageError;
          break;
        case CauseOneofCase.TransactionAborted:
          TransactionAborted = other.TransactionAborted;
          break;
        case CauseOneofCase.KeyError:
          KeyError = other.KeyError;
          break;
        case CauseOneofCase.ValueError:
          ValueError = other.ValueError;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalError Clone() {
      return new InternalError(this);
    }

    /// <summary>Field number for the "missingRequiredArgument" field.</summary>
    public const int MissingRequiredArgumentFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MissingRequiredArgument {
      get { return causeCase_ == CauseOneofCase.MissingRequiredArgument ? (string) cause_ : ""; }
      set {
        cause_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        causeCase_ = CauseOneofCase.MissingRequiredArgument;
      }
    }

    /// <summary>Field number for the "storageValueEncodingError" field.</summary>
    public const int StorageValueEncodingErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.InternalError.Types.EncodeError StorageValueEncodingError {
      get { return causeCase_ == CauseOneofCase.StorageValueEncodingError ? (global::Fulcrum.InternalError.Types.EncodeError) cause_ : null; }
      set {
        cause_ = value;
        causeCase_ = value == null ? CauseOneofCase.None : CauseOneofCase.StorageValueEncodingError;
      }
    }

    /// <summary>Field number for the "storageValueDecodingError" field.</summary>
    public const int StorageValueDecodingErrorFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.InternalError.Types.DecodeError StorageValueDecodingError {
      get { return causeCase_ == CauseOneofCase.StorageValueDecodingError ? (global::Fulcrum.InternalError.Types.DecodeError) cause_ : null; }
      set {
        cause_ = value;
        causeCase_ = value == null ? CauseOneofCase.None : CauseOneofCase.StorageValueDecodingError;
      }
    }

    /// <summary>Field number for the "storageError" field.</summary>
    public const int StorageErrorFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StorageError {
      get { return causeCase_ == CauseOneofCase.StorageError ? (string) cause_ : ""; }
      set {
        cause_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        causeCase_ = CauseOneofCase.StorageError;
      }
    }

    /// <summary>Field number for the "transactionAborted" field.</summary>
    public const int TransactionAbortedFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TransactionAborted {
      get { return causeCase_ == CauseOneofCase.TransactionAborted ? (string) cause_ : ""; }
      set {
        cause_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        causeCase_ = CauseOneofCase.TransactionAborted;
      }
    }

    /// <summary>Field number for the "keyError" field.</summary>
    public const int KeyErrorFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyError {
      get { return causeCase_ == CauseOneofCase.KeyError ? (string) cause_ : ""; }
      set {
        cause_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        causeCase_ = CauseOneofCase.KeyError;
      }
    }

    /// <summary>Field number for the "valueError" field.</summary>
    public const int ValueErrorFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ValueError {
      get { return causeCase_ == CauseOneofCase.ValueError ? (string) cause_ : ""; }
      set {
        cause_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        causeCase_ = CauseOneofCase.ValueError;
      }
    }

    private object cause_;
    /// <summary>Enum of possible cases for the "Cause" oneof.</summary>
    public enum CauseOneofCase {
      None = 0,
      MissingRequiredArgument = 1,
      StorageValueEncodingError = 2,
      StorageValueDecodingError = 3,
      StorageError = 4,
      TransactionAborted = 5,
      KeyError = 6,
      ValueError = 7,
    }
    private CauseOneofCase causeCase_ = CauseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CauseOneofCase CauseCase {
      get { return causeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCause() {
      causeCase_ = CauseOneofCase.None;
      cause_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MissingRequiredArgument != other.MissingRequiredArgument) return false;
      if (!object.Equals(StorageValueEncodingError, other.StorageValueEncodingError)) return false;
      if (!object.Equals(StorageValueDecodingError, other.StorageValueDecodingError)) return false;
      if (StorageError != other.StorageError) return false;
      if (TransactionAborted != other.TransactionAborted) return false;
      if (KeyError != other.KeyError) return false;
      if (ValueError != other.ValueError) return false;
      if (CauseCase != other.CauseCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (causeCase_ == CauseOneofCase.MissingRequiredArgument) hash ^= MissingRequiredArgument.GetHashCode();
      if (causeCase_ == CauseOneofCase.StorageValueEncodingError) hash ^= StorageValueEncodingError.GetHashCode();
      if (causeCase_ == CauseOneofCase.StorageValueDecodingError) hash ^= StorageValueDecodingError.GetHashCode();
      if (causeCase_ == CauseOneofCase.StorageError) hash ^= StorageError.GetHashCode();
      if (causeCase_ == CauseOneofCase.TransactionAborted) hash ^= TransactionAborted.GetHashCode();
      if (causeCase_ == CauseOneofCase.KeyError) hash ^= KeyError.GetHashCode();
      if (causeCase_ == CauseOneofCase.ValueError) hash ^= ValueError.GetHashCode();
      hash ^= (int) causeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (causeCase_ == CauseOneofCase.MissingRequiredArgument) {
        output.WriteRawTag(10);
        output.WriteString(MissingRequiredArgument);
      }
      if (causeCase_ == CauseOneofCase.StorageValueEncodingError) {
        output.WriteRawTag(18);
        output.WriteMessage(StorageValueEncodingError);
      }
      if (causeCase_ == CauseOneofCase.StorageValueDecodingError) {
        output.WriteRawTag(26);
        output.WriteMessage(StorageValueDecodingError);
      }
      if (causeCase_ == CauseOneofCase.StorageError) {
        output.WriteRawTag(34);
        output.WriteString(StorageError);
      }
      if (causeCase_ == CauseOneofCase.TransactionAborted) {
        output.WriteRawTag(42);
        output.WriteString(TransactionAborted);
      }
      if (causeCase_ == CauseOneofCase.KeyError) {
        output.WriteRawTag(50);
        output.WriteString(KeyError);
      }
      if (causeCase_ == CauseOneofCase.ValueError) {
        output.WriteRawTag(58);
        output.WriteString(ValueError);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (causeCase_ == CauseOneofCase.MissingRequiredArgument) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MissingRequiredArgument);
      }
      if (causeCase_ == CauseOneofCase.StorageValueEncodingError) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StorageValueEncodingError);
      }
      if (causeCase_ == CauseOneofCase.StorageValueDecodingError) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StorageValueDecodingError);
      }
      if (causeCase_ == CauseOneofCase.StorageError) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StorageError);
      }
      if (causeCase_ == CauseOneofCase.TransactionAborted) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransactionAborted);
      }
      if (causeCase_ == CauseOneofCase.KeyError) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyError);
      }
      if (causeCase_ == CauseOneofCase.ValueError) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ValueError);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalError other) {
      if (other == null) {
        return;
      }
      switch (other.CauseCase) {
        case CauseOneofCase.MissingRequiredArgument:
          MissingRequiredArgument = other.MissingRequiredArgument;
          break;
        case CauseOneofCase.StorageValueEncodingError:
          if (StorageValueEncodingError == null) {
            StorageValueEncodingError = new global::Fulcrum.InternalError.Types.EncodeError();
          }
          StorageValueEncodingError.MergeFrom(other.StorageValueEncodingError);
          break;
        case CauseOneofCase.StorageValueDecodingError:
          if (StorageValueDecodingError == null) {
            StorageValueDecodingError = new global::Fulcrum.InternalError.Types.DecodeError();
          }
          StorageValueDecodingError.MergeFrom(other.StorageValueDecodingError);
          break;
        case CauseOneofCase.StorageError:
          StorageError = other.StorageError;
          break;
        case CauseOneofCase.TransactionAborted:
          TransactionAborted = other.TransactionAborted;
          break;
        case CauseOneofCase.KeyError:
          KeyError = other.KeyError;
          break;
        case CauseOneofCase.ValueError:
          ValueError = other.ValueError;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MissingRequiredArgument = input.ReadString();
            break;
          }
          case 18: {
            global::Fulcrum.InternalError.Types.EncodeError subBuilder = new global::Fulcrum.InternalError.Types.EncodeError();
            if (causeCase_ == CauseOneofCase.StorageValueEncodingError) {
              subBuilder.MergeFrom(StorageValueEncodingError);
            }
            input.ReadMessage(subBuilder);
            StorageValueEncodingError = subBuilder;
            break;
          }
          case 26: {
            global::Fulcrum.InternalError.Types.DecodeError subBuilder = new global::Fulcrum.InternalError.Types.DecodeError();
            if (causeCase_ == CauseOneofCase.StorageValueDecodingError) {
              subBuilder.MergeFrom(StorageValueDecodingError);
            }
            input.ReadMessage(subBuilder);
            StorageValueDecodingError = subBuilder;
            break;
          }
          case 34: {
            StorageError = input.ReadString();
            break;
          }
          case 42: {
            TransactionAborted = input.ReadString();
            break;
          }
          case 50: {
            KeyError = input.ReadString();
            break;
          }
          case 58: {
            ValueError = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the InternalError message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class EncodeError : pb::IMessage<EncodeError> {
        private static readonly pb::MessageParser<EncodeError> _parser = new pb::MessageParser<EncodeError>(() => new EncodeError());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EncodeError> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Fulcrum.InternalError.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EncodeError() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EncodeError(EncodeError other) : this() {
          required_ = other.required_;
          remaining_ = other.remaining_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EncodeError Clone() {
          return new EncodeError(this);
        }

        /// <summary>Field number for the "required" field.</summary>
        public const int RequiredFieldNumber = 1;
        private ulong required_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Required {
          get { return required_; }
          set {
            required_ = value;
          }
        }

        /// <summary>Field number for the "remaining" field.</summary>
        public const int RemainingFieldNumber = 2;
        private ulong remaining_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Remaining {
          get { return remaining_; }
          set {
            remaining_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EncodeError);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EncodeError other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Required != other.Required) return false;
          if (Remaining != other.Remaining) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Required != 0UL) hash ^= Required.GetHashCode();
          if (Remaining != 0UL) hash ^= Remaining.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Required != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Required);
          }
          if (Remaining != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Remaining);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Required != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Required);
          }
          if (Remaining != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Remaining);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EncodeError other) {
          if (other == null) {
            return;
          }
          if (other.Required != 0UL) {
            Required = other.Required;
          }
          if (other.Remaining != 0UL) {
            Remaining = other.Remaining;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Required = input.ReadUInt64();
                break;
              }
              case 16: {
                Remaining = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class DecodeError : pb::IMessage<DecodeError> {
        private static readonly pb::MessageParser<DecodeError> _parser = new pb::MessageParser<DecodeError>(() => new DecodeError());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DecodeError> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Fulcrum.InternalError.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DecodeError() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DecodeError(DecodeError other) : this() {
          description_ = other.description_;
          stack_ = other.stack_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DecodeError Clone() {
          return new DecodeError(this);
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 1;
        private string description_ = "";
        /// <summary>
        //// A 'best effort' root cause description.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "stack" field.</summary>
        public const int StackFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Fulcrum.InternalError.Types.DecodeError.Types.StackLine> _repeated_stack_codec
            = pb::FieldCodec.ForMessage(18, global::Fulcrum.InternalError.Types.DecodeError.Types.StackLine.Parser);
        private readonly pbc::RepeatedField<global::Fulcrum.InternalError.Types.DecodeError.Types.StackLine> stack_ = new pbc::RepeatedField<global::Fulcrum.InternalError.Types.DecodeError.Types.StackLine>();
        /// <summary>
        //// A stack of (message, field) name pairs, which identify the specific
        //// message type and field where decoding failed. The stack contains an
        //// entry per level of nesting.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Fulcrum.InternalError.Types.DecodeError.Types.StackLine> Stack {
          get { return stack_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DecodeError);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DecodeError other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Description != other.Description) return false;
          if(!stack_.Equals(other.stack_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          hash ^= stack_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Description.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Description);
          }
          stack_.WriteTo(output, _repeated_stack_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          size += stack_.CalculateSize(_repeated_stack_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DecodeError other) {
          if (other == null) {
            return;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          stack_.Add(other.stack_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Description = input.ReadString();
                break;
              }
              case 18: {
                stack_.AddEntriesFrom(input, _repeated_stack_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the DecodeError message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class StackLine : pb::IMessage<StackLine> {
            private static readonly pb::MessageParser<StackLine> _parser = new pb::MessageParser<StackLine>(() => new StackLine());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<StackLine> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Fulcrum.InternalError.Types.DecodeError.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public StackLine() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public StackLine(StackLine other) : this() {
              message_ = other.message_;
              field_ = other.field_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public StackLine Clone() {
              return new StackLine(this);
            }

            /// <summary>Field number for the "message" field.</summary>
            public const int MessageFieldNumber = 1;
            private string message_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Message {
              get { return message_; }
              set {
                message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "field" field.</summary>
            public const int FieldFieldNumber = 2;
            private string field_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Field {
              get { return field_; }
              set {
                field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as StackLine);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(StackLine other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Message != other.Message) return false;
              if (Field != other.Field) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Message.Length != 0) hash ^= Message.GetHashCode();
              if (Field.Length != 0) hash ^= Field.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Message.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Message);
              }
              if (Field.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Field);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Message.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
              }
              if (Field.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(StackLine other) {
              if (other == null) {
                return;
              }
              if (other.Message.Length != 0) {
                Message = other.Message;
              }
              if (other.Field.Length != 0) {
                Field = other.Field;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Message = input.ReadString();
                    break;
                  }
                  case 18: {
                    Field = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class CdnUid : pb::IMessage<CdnUid> {
    private static readonly pb::MessageParser<CdnUid> _parser = new pb::MessageParser<CdnUid>(() => new CdnUid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CdnUid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnUid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnUid(CdnUid other) : this() {
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnUid Clone() {
      return new CdnUid(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CdnUid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CdnUid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CdnUid other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CdnValue : pb::IMessage<CdnValue> {
    private static readonly pb::MessageParser<CdnValue> _parser = new pb::MessageParser<CdnValue>(() => new CdnValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CdnValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnValue(CdnValue other) : this() {
      switch (other.MessageCase) {
        case MessageOneofCase.Bytes:
          Bytes = other.Bytes;
          break;
        case MessageOneofCase.Batch:
          Batch = other.Batch.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnValue Clone() {
      return new CdnValue(this);
    }

    /// <summary>Field number for the "bytes" field.</summary>
    public const int BytesFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Bytes {
      get { return messageCase_ == MessageOneofCase.Bytes ? (pb::ByteString) message_ : pb::ByteString.Empty; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        messageCase_ = MessageOneofCase.Bytes;
      }
    }

    /// <summary>Field number for the "batch" field.</summary>
    public const int BatchFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.CdnValue.Types.Batch Batch {
      get { return messageCase_ == MessageOneofCase.Batch ? (global::Fulcrum.CdnValue.Types.Batch) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Batch;
      }
    }

    private object message_;
    /// <summary>Enum of possible cases for the "message" oneof.</summary>
    public enum MessageOneofCase {
      None = 0,
      Bytes = 6,
      Batch = 10,
    }
    private MessageOneofCase messageCase_ = MessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageOneofCase MessageCase {
      get { return messageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      messageCase_ = MessageOneofCase.None;
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CdnValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CdnValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Bytes != other.Bytes) return false;
      if (!object.Equals(Batch, other.Batch)) return false;
      if (MessageCase != other.MessageCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (messageCase_ == MessageOneofCase.Bytes) hash ^= Bytes.GetHashCode();
      if (messageCase_ == MessageOneofCase.Batch) hash ^= Batch.GetHashCode();
      hash ^= (int) messageCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (messageCase_ == MessageOneofCase.Bytes) {
        output.WriteRawTag(50);
        output.WriteBytes(Bytes);
      }
      if (messageCase_ == MessageOneofCase.Batch) {
        output.WriteRawTag(82);
        output.WriteMessage(Batch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (messageCase_ == MessageOneofCase.Bytes) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bytes);
      }
      if (messageCase_ == MessageOneofCase.Batch) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Batch);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CdnValue other) {
      if (other == null) {
        return;
      }
      switch (other.MessageCase) {
        case MessageOneofCase.Bytes:
          Bytes = other.Bytes;
          break;
        case MessageOneofCase.Batch:
          if (Batch == null) {
            Batch = new global::Fulcrum.CdnValue.Types.Batch();
          }
          Batch.MergeFrom(other.Batch);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 50: {
            Bytes = input.ReadBytes();
            break;
          }
          case 82: {
            global::Fulcrum.CdnValue.Types.Batch subBuilder = new global::Fulcrum.CdnValue.Types.Batch();
            if (messageCase_ == MessageOneofCase.Batch) {
              subBuilder.MergeFrom(Batch);
            }
            input.ReadMessage(subBuilder);
            Batch = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CdnValue message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Batch : pb::IMessage<Batch> {
        private static readonly pb::MessageParser<Batch> _parser = new pb::MessageParser<Batch>(() => new Batch());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Batch> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Fulcrum.CdnValue.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Batch() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Batch(Batch other) : this() {
          uids_ = other.uids_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Batch Clone() {
          return new Batch(this);
        }

        /// <summary>Field number for the "uids" field.</summary>
        public const int UidsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Fulcrum.CdnUid> _repeated_uids_codec
            = pb::FieldCodec.ForMessage(10, global::Fulcrum.CdnUid.Parser);
        private readonly pbc::RepeatedField<global::Fulcrum.CdnUid> uids_ = new pbc::RepeatedField<global::Fulcrum.CdnUid>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Fulcrum.CdnUid> Uids {
          get { return uids_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Batch);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Batch other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!uids_.Equals(other.uids_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= uids_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          uids_.WriteTo(output, _repeated_uids_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += uids_.CalculateSize(_repeated_uids_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Batch other) {
          if (other == null) {
            return;
          }
          uids_.Add(other.uids_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                uids_.AddEntriesFrom(input, _repeated_uids_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CdnKeyValue : pb::IMessage<CdnKeyValue> {
    private static readonly pb::MessageParser<CdnKeyValue> _parser = new pb::MessageParser<CdnKeyValue>(() => new CdnKeyValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CdnKeyValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnKeyValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnKeyValue(CdnKeyValue other) : this() {
      key_ = other.key_ != null ? other.key_.Clone() : null;
      value_ = other.value_ != null ? other.value_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnKeyValue Clone() {
      return new CdnKeyValue(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::Fulcrum.CdnUid key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.CdnUid Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::Fulcrum.CdnValue value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.CdnValue Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CdnKeyValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CdnKeyValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CdnKeyValue other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          Key = new global::Fulcrum.CdnUid();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.value_ != null) {
        if (value_ == null) {
          Value = new global::Fulcrum.CdnValue();
        }
        Value.MergeFrom(other.Value);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (key_ == null) {
              Key = new global::Fulcrum.CdnUid();
            }
            input.ReadMessage(Key);
            break;
          }
          case 18: {
            if (value_ == null) {
              Value = new global::Fulcrum.CdnValue();
            }
            input.ReadMessage(Value);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CdnGetRequest : pb::IMessage<CdnGetRequest> {
    private static readonly pb::MessageParser<CdnGetRequest> _parser = new pb::MessageParser<CdnGetRequest>(() => new CdnGetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CdnGetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnGetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnGetRequest(CdnGetRequest other) : this() {
      uid_ = other.uid_ != null ? other.uid_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnGetRequest Clone() {
      return new CdnGetRequest(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private global::Fulcrum.CdnUid uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.CdnUid Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CdnGetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CdnGetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Uid, other.Uid)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (uid_ != null) hash ^= Uid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (uid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (uid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CdnGetRequest other) {
      if (other == null) {
        return;
      }
      if (other.uid_ != null) {
        if (uid_ == null) {
          Uid = new global::Fulcrum.CdnUid();
        }
        Uid.MergeFrom(other.Uid);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (uid_ == null) {
              Uid = new global::Fulcrum.CdnUid();
            }
            input.ReadMessage(Uid);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CdnGetResponse : pb::IMessage<CdnGetResponse> {
    private static readonly pb::MessageParser<CdnGetResponse> _parser = new pb::MessageParser<CdnGetResponse>(() => new CdnGetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CdnGetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnGetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnGetResponse(CdnGetResponse other) : this() {
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success.Clone();
          break;
        case RespOneofCase.NotFound:
          NotFound = other.NotFound.Clone();
          break;
        case RespOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnGetResponse Clone() {
      return new CdnGetResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.CdnValue Success {
      get { return respCase_ == RespOneofCase.Success ? (global::Fulcrum.CdnValue) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Success;
      }
    }

    /// <summary>Field number for the "notFound" field.</summary>
    public const int NotFoundFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.CdnUid NotFound {
      get { return respCase_ == RespOneofCase.NotFound ? (global::Fulcrum.CdnUid) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.NotFound;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 100;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.InternalError Error {
      get { return respCase_ == RespOneofCase.Error ? (global::Fulcrum.InternalError) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Error;
      }
    }

    private object resp_;
    /// <summary>Enum of possible cases for the "Resp" oneof.</summary>
    public enum RespOneofCase {
      None = 0,
      Success = 1,
      NotFound = 2,
      Error = 100,
    }
    private RespOneofCase respCase_ = RespOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespOneofCase RespCase {
      get { return respCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResp() {
      respCase_ = RespOneofCase.None;
      resp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CdnGetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CdnGetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Success, other.Success)) return false;
      if (!object.Equals(NotFound, other.NotFound)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (RespCase != other.RespCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (respCase_ == RespOneofCase.Success) hash ^= Success.GetHashCode();
      if (respCase_ == RespOneofCase.NotFound) hash ^= NotFound.GetHashCode();
      if (respCase_ == RespOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) respCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (respCase_ == RespOneofCase.Success) {
        output.WriteRawTag(10);
        output.WriteMessage(Success);
      }
      if (respCase_ == RespOneofCase.NotFound) {
        output.WriteRawTag(18);
        output.WriteMessage(NotFound);
      }
      if (respCase_ == RespOneofCase.Error) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (respCase_ == RespOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Success);
      }
      if (respCase_ == RespOneofCase.NotFound) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotFound);
      }
      if (respCase_ == RespOneofCase.Error) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CdnGetResponse other) {
      if (other == null) {
        return;
      }
      switch (other.RespCase) {
        case RespOneofCase.Success:
          if (Success == null) {
            Success = new global::Fulcrum.CdnValue();
          }
          Success.MergeFrom(other.Success);
          break;
        case RespOneofCase.NotFound:
          if (NotFound == null) {
            NotFound = new global::Fulcrum.CdnUid();
          }
          NotFound.MergeFrom(other.NotFound);
          break;
        case RespOneofCase.Error:
          if (Error == null) {
            Error = new global::Fulcrum.InternalError();
          }
          Error.MergeFrom(other.Error);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Fulcrum.CdnValue subBuilder = new global::Fulcrum.CdnValue();
            if (respCase_ == RespOneofCase.Success) {
              subBuilder.MergeFrom(Success);
            }
            input.ReadMessage(subBuilder);
            Success = subBuilder;
            break;
          }
          case 18: {
            global::Fulcrum.CdnUid subBuilder = new global::Fulcrum.CdnUid();
            if (respCase_ == RespOneofCase.NotFound) {
              subBuilder.MergeFrom(NotFound);
            }
            input.ReadMessage(subBuilder);
            NotFound = subBuilder;
            break;
          }
          case 802: {
            global::Fulcrum.InternalError subBuilder = new global::Fulcrum.InternalError();
            if (respCase_ == RespOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class CdnContainsRequest : pb::IMessage<CdnContainsRequest> {
    private static readonly pb::MessageParser<CdnContainsRequest> _parser = new pb::MessageParser<CdnContainsRequest>(() => new CdnContainsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CdnContainsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnContainsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnContainsRequest(CdnContainsRequest other) : this() {
      uid_ = other.uid_ != null ? other.uid_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnContainsRequest Clone() {
      return new CdnContainsRequest(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private global::Fulcrum.CdnUid uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.CdnUid Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CdnContainsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CdnContainsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Uid, other.Uid)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (uid_ != null) hash ^= Uid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (uid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (uid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CdnContainsRequest other) {
      if (other == null) {
        return;
      }
      if (other.uid_ != null) {
        if (uid_ == null) {
          Uid = new global::Fulcrum.CdnUid();
        }
        Uid.MergeFrom(other.Uid);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (uid_ == null) {
              Uid = new global::Fulcrum.CdnUid();
            }
            input.ReadMessage(Uid);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CdnContainsResponse : pb::IMessage<CdnContainsResponse> {
    private static readonly pb::MessageParser<CdnContainsResponse> _parser = new pb::MessageParser<CdnContainsResponse>(() => new CdnContainsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CdnContainsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnContainsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnContainsResponse(CdnContainsResponse other) : this() {
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success;
          break;
        case RespOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnContainsResponse Clone() {
      return new CdnContainsResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return respCase_ == RespOneofCase.Success ? (bool) resp_ : false; }
      set {
        resp_ = value;
        respCase_ = RespOneofCase.Success;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 100;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.InternalError Error {
      get { return respCase_ == RespOneofCase.Error ? (global::Fulcrum.InternalError) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Error;
      }
    }

    private object resp_;
    /// <summary>Enum of possible cases for the "Resp" oneof.</summary>
    public enum RespOneofCase {
      None = 0,
      Success = 1,
      Error = 100,
    }
    private RespOneofCase respCase_ = RespOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespOneofCase RespCase {
      get { return respCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResp() {
      respCase_ = RespOneofCase.None;
      resp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CdnContainsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CdnContainsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (RespCase != other.RespCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (respCase_ == RespOneofCase.Success) hash ^= Success.GetHashCode();
      if (respCase_ == RespOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) respCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (respCase_ == RespOneofCase.Success) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (respCase_ == RespOneofCase.Error) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (respCase_ == RespOneofCase.Success) {
        size += 1 + 1;
      }
      if (respCase_ == RespOneofCase.Error) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CdnContainsResponse other) {
      if (other == null) {
        return;
      }
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success;
          break;
        case RespOneofCase.Error:
          if (Error == null) {
            Error = new global::Fulcrum.InternalError();
          }
          Error.MergeFrom(other.Error);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 802: {
            global::Fulcrum.InternalError subBuilder = new global::Fulcrum.InternalError();
            if (respCase_ == RespOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class CdnStreamValueResponse : pb::IMessage<CdnStreamValueResponse> {
    private static readonly pb::MessageParser<CdnStreamValueResponse> _parser = new pb::MessageParser<CdnStreamValueResponse>(() => new CdnStreamValueResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CdnStreamValueResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnStreamValueResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnStreamValueResponse(CdnStreamValueResponse other) : this() {
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success.Clone();
          break;
        case RespOneofCase.NotFound:
          NotFound = other.NotFound.Clone();
          break;
        case RespOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnStreamValueResponse Clone() {
      return new CdnStreamValueResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.CdnKeyValue Success {
      get { return respCase_ == RespOneofCase.Success ? (global::Fulcrum.CdnKeyValue) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Success;
      }
    }

    /// <summary>Field number for the "notFound" field.</summary>
    public const int NotFoundFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.CdnUid NotFound {
      get { return respCase_ == RespOneofCase.NotFound ? (global::Fulcrum.CdnUid) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.NotFound;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 100;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.InternalError Error {
      get { return respCase_ == RespOneofCase.Error ? (global::Fulcrum.InternalError) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Error;
      }
    }

    private object resp_;
    /// <summary>Enum of possible cases for the "Resp" oneof.</summary>
    public enum RespOneofCase {
      None = 0,
      Success = 1,
      NotFound = 2,
      Error = 100,
    }
    private RespOneofCase respCase_ = RespOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespOneofCase RespCase {
      get { return respCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResp() {
      respCase_ = RespOneofCase.None;
      resp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CdnStreamValueResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CdnStreamValueResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Success, other.Success)) return false;
      if (!object.Equals(NotFound, other.NotFound)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (RespCase != other.RespCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (respCase_ == RespOneofCase.Success) hash ^= Success.GetHashCode();
      if (respCase_ == RespOneofCase.NotFound) hash ^= NotFound.GetHashCode();
      if (respCase_ == RespOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) respCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (respCase_ == RespOneofCase.Success) {
        output.WriteRawTag(10);
        output.WriteMessage(Success);
      }
      if (respCase_ == RespOneofCase.NotFound) {
        output.WriteRawTag(18);
        output.WriteMessage(NotFound);
      }
      if (respCase_ == RespOneofCase.Error) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (respCase_ == RespOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Success);
      }
      if (respCase_ == RespOneofCase.NotFound) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotFound);
      }
      if (respCase_ == RespOneofCase.Error) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CdnStreamValueResponse other) {
      if (other == null) {
        return;
      }
      switch (other.RespCase) {
        case RespOneofCase.Success:
          if (Success == null) {
            Success = new global::Fulcrum.CdnKeyValue();
          }
          Success.MergeFrom(other.Success);
          break;
        case RespOneofCase.NotFound:
          if (NotFound == null) {
            NotFound = new global::Fulcrum.CdnUid();
          }
          NotFound.MergeFrom(other.NotFound);
          break;
        case RespOneofCase.Error:
          if (Error == null) {
            Error = new global::Fulcrum.InternalError();
          }
          Error.MergeFrom(other.Error);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Fulcrum.CdnKeyValue subBuilder = new global::Fulcrum.CdnKeyValue();
            if (respCase_ == RespOneofCase.Success) {
              subBuilder.MergeFrom(Success);
            }
            input.ReadMessage(subBuilder);
            Success = subBuilder;
            break;
          }
          case 18: {
            global::Fulcrum.CdnUid subBuilder = new global::Fulcrum.CdnUid();
            if (respCase_ == RespOneofCase.NotFound) {
              subBuilder.MergeFrom(NotFound);
            }
            input.ReadMessage(subBuilder);
            NotFound = subBuilder;
            break;
          }
          case 802: {
            global::Fulcrum.InternalError subBuilder = new global::Fulcrum.InternalError();
            if (respCase_ == RespOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class CdnAddRequest : pb::IMessage<CdnAddRequest> {
    private static readonly pb::MessageParser<CdnAddRequest> _parser = new pb::MessageParser<CdnAddRequest>(() => new CdnAddRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CdnAddRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnAddRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnAddRequest(CdnAddRequest other) : this() {
      uid_ = other.uid_ != null ? other.uid_.Clone() : null;
      value_ = other.value_ != null ? other.value_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnAddRequest Clone() {
      return new CdnAddRequest(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private global::Fulcrum.CdnUid uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.CdnUid Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::Fulcrum.CdnValue value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.CdnValue Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CdnAddRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CdnAddRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Uid, other.Uid)) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (uid_ != null) hash ^= Uid.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (uid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Uid);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (uid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uid);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CdnAddRequest other) {
      if (other == null) {
        return;
      }
      if (other.uid_ != null) {
        if (uid_ == null) {
          Uid = new global::Fulcrum.CdnUid();
        }
        Uid.MergeFrom(other.Uid);
      }
      if (other.value_ != null) {
        if (value_ == null) {
          Value = new global::Fulcrum.CdnValue();
        }
        Value.MergeFrom(other.Value);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (uid_ == null) {
              Uid = new global::Fulcrum.CdnUid();
            }
            input.ReadMessage(Uid);
            break;
          }
          case 18: {
            if (value_ == null) {
              Value = new global::Fulcrum.CdnValue();
            }
            input.ReadMessage(Value);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CdnAddResponse : pb::IMessage<CdnAddResponse> {
    private static readonly pb::MessageParser<CdnAddResponse> _parser = new pb::MessageParser<CdnAddResponse>(() => new CdnAddResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CdnAddResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnAddResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnAddResponse(CdnAddResponse other) : this() {
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success.Clone();
          break;
        case RespOneofCase.Exists:
          Exists = other.Exists.Clone();
          break;
        case RespOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnAddResponse Clone() {
      return new CdnAddResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.CdnUid Success {
      get { return respCase_ == RespOneofCase.Success ? (global::Fulcrum.CdnUid) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Success;
      }
    }

    /// <summary>Field number for the "exists" field.</summary>
    public const int ExistsFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.CdnUid Exists {
      get { return respCase_ == RespOneofCase.Exists ? (global::Fulcrum.CdnUid) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Exists;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 100;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.InternalError Error {
      get { return respCase_ == RespOneofCase.Error ? (global::Fulcrum.InternalError) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Error;
      }
    }

    private object resp_;
    /// <summary>Enum of possible cases for the "Resp" oneof.</summary>
    public enum RespOneofCase {
      None = 0,
      Success = 1,
      Exists = 2,
      Error = 100,
    }
    private RespOneofCase respCase_ = RespOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespOneofCase RespCase {
      get { return respCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResp() {
      respCase_ = RespOneofCase.None;
      resp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CdnAddResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CdnAddResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Success, other.Success)) return false;
      if (!object.Equals(Exists, other.Exists)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (RespCase != other.RespCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (respCase_ == RespOneofCase.Success) hash ^= Success.GetHashCode();
      if (respCase_ == RespOneofCase.Exists) hash ^= Exists.GetHashCode();
      if (respCase_ == RespOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) respCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (respCase_ == RespOneofCase.Success) {
        output.WriteRawTag(10);
        output.WriteMessage(Success);
      }
      if (respCase_ == RespOneofCase.Exists) {
        output.WriteRawTag(18);
        output.WriteMessage(Exists);
      }
      if (respCase_ == RespOneofCase.Error) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (respCase_ == RespOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Success);
      }
      if (respCase_ == RespOneofCase.Exists) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Exists);
      }
      if (respCase_ == RespOneofCase.Error) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CdnAddResponse other) {
      if (other == null) {
        return;
      }
      switch (other.RespCase) {
        case RespOneofCase.Success:
          if (Success == null) {
            Success = new global::Fulcrum.CdnUid();
          }
          Success.MergeFrom(other.Success);
          break;
        case RespOneofCase.Exists:
          if (Exists == null) {
            Exists = new global::Fulcrum.CdnUid();
          }
          Exists.MergeFrom(other.Exists);
          break;
        case RespOneofCase.Error:
          if (Error == null) {
            Error = new global::Fulcrum.InternalError();
          }
          Error.MergeFrom(other.Error);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Fulcrum.CdnUid subBuilder = new global::Fulcrum.CdnUid();
            if (respCase_ == RespOneofCase.Success) {
              subBuilder.MergeFrom(Success);
            }
            input.ReadMessage(subBuilder);
            Success = subBuilder;
            break;
          }
          case 18: {
            global::Fulcrum.CdnUid subBuilder = new global::Fulcrum.CdnUid();
            if (respCase_ == RespOneofCase.Exists) {
              subBuilder.MergeFrom(Exists);
            }
            input.ReadMessage(subBuilder);
            Exists = subBuilder;
            break;
          }
          case 802: {
            global::Fulcrum.InternalError subBuilder = new global::Fulcrum.InternalError();
            if (respCase_ == RespOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class CdnDeleteRequest : pb::IMessage<CdnDeleteRequest> {
    private static readonly pb::MessageParser<CdnDeleteRequest> _parser = new pb::MessageParser<CdnDeleteRequest>(() => new CdnDeleteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CdnDeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnDeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnDeleteRequest(CdnDeleteRequest other) : this() {
      uid_ = other.uid_ != null ? other.uid_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnDeleteRequest Clone() {
      return new CdnDeleteRequest(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private global::Fulcrum.CdnUid uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.CdnUid Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CdnDeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CdnDeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Uid, other.Uid)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (uid_ != null) hash ^= Uid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (uid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (uid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CdnDeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.uid_ != null) {
        if (uid_ == null) {
          Uid = new global::Fulcrum.CdnUid();
        }
        Uid.MergeFrom(other.Uid);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (uid_ == null) {
              Uid = new global::Fulcrum.CdnUid();
            }
            input.ReadMessage(Uid);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CdnDeleteResponse : pb::IMessage<CdnDeleteResponse> {
    private static readonly pb::MessageParser<CdnDeleteResponse> _parser = new pb::MessageParser<CdnDeleteResponse>(() => new CdnDeleteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CdnDeleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnDeleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnDeleteResponse(CdnDeleteResponse other) : this() {
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success.Clone();
          break;
        case RespOneofCase.NotFound:
          NotFound = other.NotFound.Clone();
          break;
        case RespOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CdnDeleteResponse Clone() {
      return new CdnDeleteResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.CdnUid Success {
      get { return respCase_ == RespOneofCase.Success ? (global::Fulcrum.CdnUid) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Success;
      }
    }

    /// <summary>Field number for the "notFound" field.</summary>
    public const int NotFoundFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.CdnUid NotFound {
      get { return respCase_ == RespOneofCase.NotFound ? (global::Fulcrum.CdnUid) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.NotFound;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 100;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.InternalError Error {
      get { return respCase_ == RespOneofCase.Error ? (global::Fulcrum.InternalError) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Error;
      }
    }

    private object resp_;
    /// <summary>Enum of possible cases for the "Resp" oneof.</summary>
    public enum RespOneofCase {
      None = 0,
      Success = 1,
      NotFound = 2,
      Error = 100,
    }
    private RespOneofCase respCase_ = RespOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespOneofCase RespCase {
      get { return respCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResp() {
      respCase_ = RespOneofCase.None;
      resp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CdnDeleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CdnDeleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Success, other.Success)) return false;
      if (!object.Equals(NotFound, other.NotFound)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (RespCase != other.RespCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (respCase_ == RespOneofCase.Success) hash ^= Success.GetHashCode();
      if (respCase_ == RespOneofCase.NotFound) hash ^= NotFound.GetHashCode();
      if (respCase_ == RespOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) respCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (respCase_ == RespOneofCase.Success) {
        output.WriteRawTag(10);
        output.WriteMessage(Success);
      }
      if (respCase_ == RespOneofCase.NotFound) {
        output.WriteRawTag(18);
        output.WriteMessage(NotFound);
      }
      if (respCase_ == RespOneofCase.Error) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (respCase_ == RespOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Success);
      }
      if (respCase_ == RespOneofCase.NotFound) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotFound);
      }
      if (respCase_ == RespOneofCase.Error) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CdnDeleteResponse other) {
      if (other == null) {
        return;
      }
      switch (other.RespCase) {
        case RespOneofCase.Success:
          if (Success == null) {
            Success = new global::Fulcrum.CdnUid();
          }
          Success.MergeFrom(other.Success);
          break;
        case RespOneofCase.NotFound:
          if (NotFound == null) {
            NotFound = new global::Fulcrum.CdnUid();
          }
          NotFound.MergeFrom(other.NotFound);
          break;
        case RespOneofCase.Error:
          if (Error == null) {
            Error = new global::Fulcrum.InternalError();
          }
          Error.MergeFrom(other.Error);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Fulcrum.CdnUid subBuilder = new global::Fulcrum.CdnUid();
            if (respCase_ == RespOneofCase.Success) {
              subBuilder.MergeFrom(Success);
            }
            input.ReadMessage(subBuilder);
            Success = subBuilder;
            break;
          }
          case 18: {
            global::Fulcrum.CdnUid subBuilder = new global::Fulcrum.CdnUid();
            if (respCase_ == RespOneofCase.NotFound) {
              subBuilder.MergeFrom(NotFound);
            }
            input.ReadMessage(subBuilder);
            NotFound = subBuilder;
            break;
          }
          case 802: {
            global::Fulcrum.InternalError subBuilder = new global::Fulcrum.InternalError();
            if (respCase_ == RespOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeyUid : pb::IMessage<KeyUid> {
    private static readonly pb::MessageParser<KeyUid> _parser = new pb::MessageParser<KeyUid>(() => new KeyUid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyUid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyUid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyUid(KeyUid other) : this() {
      sip_ = other.sip_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyUid Clone() {
      return new KeyUid(this);
    }

    /// <summary>Field number for the "sip" field.</summary>
    public const int SipFieldNumber = 1;
    private pb::ByteString sip_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Sip {
      get { return sip_; }
      set {
        sip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyUid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyUid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sip != other.Sip) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sip.Length != 0) hash ^= Sip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Sip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Sip);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyUid other) {
      if (other == null) {
        return;
      }
      if (other.Sip.Length != 0) {
        Sip = other.Sip;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Sip = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeyFamilyUid : pb::IMessage<KeyFamilyUid> {
    private static readonly pb::MessageParser<KeyFamilyUid> _parser = new pb::MessageParser<KeyFamilyUid>(() => new KeyFamilyUid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyFamilyUid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyFamilyUid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyFamilyUid(KeyFamilyUid other) : this() {
      sip_ = other.sip_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyFamilyUid Clone() {
      return new KeyFamilyUid(this);
    }

    /// <summary>Field number for the "sip" field.</summary>
    public const int SipFieldNumber = 1;
    private pb::ByteString sip_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Sip {
      get { return sip_; }
      set {
        sip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyFamilyUid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyFamilyUid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sip != other.Sip) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sip.Length != 0) hash ^= Sip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Sip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Sip);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyFamilyUid other) {
      if (other == null) {
        return;
      }
      if (other.Sip.Length != 0) {
        Sip = other.Sip;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Sip = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Key : pb::IMessage<Key> {
    private static readonly pb::MessageParser<Key> _parser = new pb::MessageParser<Key>(() => new Key());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Key> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Key() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Key(Key other) : this() {
      key_ = other.key_;
      keyFamily_ = other.keyFamily_ != null ? other.keyFamily_.Clone() : null;
      uid_ = other.uid_ != null ? other.uid_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Key Clone() {
      return new Key(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int Key_FieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key_ {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keyFamily" field.</summary>
    public const int KeyFamilyFieldNumber = 2;
    private global::Fulcrum.KeyFamilyUid keyFamily_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.KeyFamilyUid KeyFamily {
      get { return keyFamily_; }
      set {
        keyFamily_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 5;
    private global::Fulcrum.KeyUid uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.KeyUid Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Key);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Key other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key_ != other.Key_) return false;
      if (!object.Equals(KeyFamily, other.KeyFamily)) return false;
      if (!object.Equals(Uid, other.Uid)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key_.Length != 0) hash ^= Key_.GetHashCode();
      if (keyFamily_ != null) hash ^= KeyFamily.GetHashCode();
      if (uid_ != null) hash ^= Uid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key_);
      }
      if (keyFamily_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(KeyFamily);
      }
      if (uid_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key_);
      }
      if (keyFamily_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KeyFamily);
      }
      if (uid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Key other) {
      if (other == null) {
        return;
      }
      if (other.Key_.Length != 0) {
        Key_ = other.Key_;
      }
      if (other.keyFamily_ != null) {
        if (keyFamily_ == null) {
          KeyFamily = new global::Fulcrum.KeyFamilyUid();
        }
        KeyFamily.MergeFrom(other.KeyFamily);
      }
      if (other.uid_ != null) {
        if (uid_ == null) {
          Uid = new global::Fulcrum.KeyUid();
        }
        Uid.MergeFrom(other.Uid);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key_ = input.ReadString();
            break;
          }
          case 18: {
            if (keyFamily_ == null) {
              KeyFamily = new global::Fulcrum.KeyFamilyUid();
            }
            input.ReadMessage(KeyFamily);
            break;
          }
          case 42: {
            if (uid_ == null) {
              Uid = new global::Fulcrum.KeyUid();
            }
            input.ReadMessage(Uid);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ValueMetadata : pb::IMessage<ValueMetadata> {
    private static readonly pb::MessageParser<ValueMetadata> _parser = new pb::MessageParser<ValueMetadata>(() => new ValueMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValueMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueMetadata(ValueMetadata other) : this() {
      hashedWith_ = other.hashedWith_;
      hash_ = other.hash_;
      compression_ = other.compression_;
      sizeCompressed_ = other.sizeCompressed_;
      sizeFull_ = other.sizeFull_;
      serializerId_ = other.serializerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueMetadata Clone() {
      return new ValueMetadata(this);
    }

    /// <summary>Field number for the "hashedWith" field.</summary>
    public const int HashedWithFieldNumber = 1;
    private global::Fulcrum.ValueMetadata.Types.HashedWith hashedWith_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.ValueMetadata.Types.HashedWith HashedWith {
      get { return hashedWith_; }
      set {
        hashedWith_ = value;
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 2;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "compression" field.</summary>
    public const int CompressionFieldNumber = 3;
    private global::Fulcrum.ValueMetadata.Types.Compression compression_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.ValueMetadata.Types.Compression Compression {
      get { return compression_; }
      set {
        compression_ = value;
      }
    }

    /// <summary>Field number for the "sizeCompressed" field.</summary>
    public const int SizeCompressedFieldNumber = 4;
    private uint sizeCompressed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SizeCompressed {
      get { return sizeCompressed_; }
      set {
        sizeCompressed_ = value;
      }
    }

    /// <summary>Field number for the "sizeFull" field.</summary>
    public const int SizeFullFieldNumber = 5;
    private uint sizeFull_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SizeFull {
      get { return sizeFull_; }
      set {
        sizeFull_ = value;
      }
    }

    /// <summary>Field number for the "serializerId" field.</summary>
    public const int SerializerIdFieldNumber = 6;
    private string serializerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SerializerId {
      get { return serializerId_; }
      set {
        serializerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValueMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValueMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HashedWith != other.HashedWith) return false;
      if (Hash != other.Hash) return false;
      if (Compression != other.Compression) return false;
      if (SizeCompressed != other.SizeCompressed) return false;
      if (SizeFull != other.SizeFull) return false;
      if (SerializerId != other.SerializerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HashedWith != 0) hash ^= HashedWith.GetHashCode();
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (Compression != 0) hash ^= Compression.GetHashCode();
      if (SizeCompressed != 0) hash ^= SizeCompressed.GetHashCode();
      if (SizeFull != 0) hash ^= SizeFull.GetHashCode();
      if (SerializerId.Length != 0) hash ^= SerializerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HashedWith != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) HashedWith);
      }
      if (Hash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Hash);
      }
      if (Compression != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Compression);
      }
      if (SizeCompressed != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SizeCompressed);
      }
      if (SizeFull != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SizeFull);
      }
      if (SerializerId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SerializerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HashedWith != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HashedWith);
      }
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      if (Compression != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Compression);
      }
      if (SizeCompressed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SizeCompressed);
      }
      if (SizeFull != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SizeFull);
      }
      if (SerializerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SerializerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValueMetadata other) {
      if (other == null) {
        return;
      }
      if (other.HashedWith != 0) {
        HashedWith = other.HashedWith;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.Compression != 0) {
        Compression = other.Compression;
      }
      if (other.SizeCompressed != 0) {
        SizeCompressed = other.SizeCompressed;
      }
      if (other.SizeFull != 0) {
        SizeFull = other.SizeFull;
      }
      if (other.SerializerId.Length != 0) {
        SerializerId = other.SerializerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HashedWith = (global::Fulcrum.ValueMetadata.Types.HashedWith) input.ReadEnum();
            break;
          }
          case 18: {
            Hash = input.ReadBytes();
            break;
          }
          case 24: {
            Compression = (global::Fulcrum.ValueMetadata.Types.Compression) input.ReadEnum();
            break;
          }
          case 32: {
            SizeCompressed = input.ReadUInt32();
            break;
          }
          case 40: {
            SizeFull = input.ReadUInt32();
            break;
          }
          case 50: {
            SerializerId = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ValueMetadata message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum HashedWith {
        [pbr::OriginalName("SIP")] Sip = 0,
      }

      public enum Compression {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("LZ4")] Lz4 = 1,
        [pbr::OriginalName("GZIP")] Gzip = 2,
      }

    }
    #endregion

  }

  public sealed partial class KvMetadata : pb::IMessage<KvMetadata> {
    private static readonly pb::MessageParser<KvMetadata> _parser = new pb::MessageParser<KvMetadata>(() => new KvMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KvMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KvMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KvMetadata(KvMetadata other) : this() {
      keyUid_ = other.keyUid_ != null ? other.keyUid_.Clone() : null;
      status_ = other.status_;
      expiry_ = other.expiry_ != null ? other.expiry_.Clone() : null;
      action_ = other.action_;
      createdBy_ = other.createdBy_ != null ? other.createdBy_.Clone() : null;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      correlationId_ = other.correlationId_;
      originatorReplicaId_ = other.originatorReplicaId_;
      valueMetadata_ = other.valueMetadata_ != null ? other.valueMetadata_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KvMetadata Clone() {
      return new KvMetadata(this);
    }

    /// <summary>Field number for the "keyUid" field.</summary>
    public const int KeyUidFieldNumber = 1;
    private global::Fulcrum.KeyUid keyUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.KeyUid KeyUid {
      get { return keyUid_; }
      set {
        keyUid_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Fulcrum.KvMetadata.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.KvMetadata.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expiry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Expiry {
      get { return expiry_; }
      set {
        expiry_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 6;
    private global::Fulcrum.KvMetadata.Types.UpdateAction action_ = 0;
    /// <summary>
    /// VectorClock originated      = 4; 
    /// VectorClock locallyUpdated  = 5;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.KvMetadata.Types.UpdateAction Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "createdBy" field.</summary>
    public const int CreatedByFieldNumber = 7;
    private global::Fulcrum.KvMetadata.Types.User createdBy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.KvMetadata.Types.User CreatedBy {
      get { return createdBy_; }
      set {
        createdBy_ = value;
      }
    }

    /// <summary>Field number for the "createdAt" field.</summary>
    public const int CreatedAtFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "correlationId" field.</summary>
    public const int CorrelationIdFieldNumber = 9;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "originatorReplicaId" field.</summary>
    public const int OriginatorReplicaIdFieldNumber = 10;
    private string originatorReplicaId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OriginatorReplicaId {
      get { return originatorReplicaId_; }
      set {
        originatorReplicaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "valueMetadata" field.</summary>
    public const int ValueMetadataFieldNumber = 20;
    private global::Fulcrum.ValueMetadata valueMetadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.ValueMetadata ValueMetadata {
      get { return valueMetadata_; }
      set {
        valueMetadata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KvMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KvMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(KeyUid, other.KeyUid)) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(Expiry, other.Expiry)) return false;
      if (Action != other.Action) return false;
      if (!object.Equals(CreatedBy, other.CreatedBy)) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (CorrelationId != other.CorrelationId) return false;
      if (OriginatorReplicaId != other.OriginatorReplicaId) return false;
      if (!object.Equals(ValueMetadata, other.ValueMetadata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (keyUid_ != null) hash ^= KeyUid.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (expiry_ != null) hash ^= Expiry.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      if (createdBy_ != null) hash ^= CreatedBy.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      if (OriginatorReplicaId.Length != 0) hash ^= OriginatorReplicaId.GetHashCode();
      if (valueMetadata_ != null) hash ^= ValueMetadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (keyUid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(KeyUid);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (expiry_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Expiry);
      }
      if (Action != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Action);
      }
      if (createdBy_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CreatedBy);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CreatedAt);
      }
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CorrelationId);
      }
      if (OriginatorReplicaId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(OriginatorReplicaId);
      }
      if (valueMetadata_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(ValueMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (keyUid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KeyUid);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (expiry_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expiry);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (createdBy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedBy);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      if (OriginatorReplicaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginatorReplicaId);
      }
      if (valueMetadata_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ValueMetadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KvMetadata other) {
      if (other == null) {
        return;
      }
      if (other.keyUid_ != null) {
        if (keyUid_ == null) {
          KeyUid = new global::Fulcrum.KeyUid();
        }
        KeyUid.MergeFrom(other.KeyUid);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.expiry_ != null) {
        if (expiry_ == null) {
          Expiry = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Expiry.MergeFrom(other.Expiry);
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.createdBy_ != null) {
        if (createdBy_ == null) {
          CreatedBy = new global::Fulcrum.KvMetadata.Types.User();
        }
        CreatedBy.MergeFrom(other.CreatedBy);
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      if (other.OriginatorReplicaId.Length != 0) {
        OriginatorReplicaId = other.OriginatorReplicaId;
      }
      if (other.valueMetadata_ != null) {
        if (valueMetadata_ == null) {
          ValueMetadata = new global::Fulcrum.ValueMetadata();
        }
        ValueMetadata.MergeFrom(other.ValueMetadata);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (keyUid_ == null) {
              KeyUid = new global::Fulcrum.KeyUid();
            }
            input.ReadMessage(KeyUid);
            break;
          }
          case 16: {
            Status = (global::Fulcrum.KvMetadata.Types.Status) input.ReadEnum();
            break;
          }
          case 26: {
            if (expiry_ == null) {
              Expiry = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Expiry);
            break;
          }
          case 48: {
            Action = (global::Fulcrum.KvMetadata.Types.UpdateAction) input.ReadEnum();
            break;
          }
          case 58: {
            if (createdBy_ == null) {
              CreatedBy = new global::Fulcrum.KvMetadata.Types.User();
            }
            input.ReadMessage(CreatedBy);
            break;
          }
          case 66: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 74: {
            CorrelationId = input.ReadString();
            break;
          }
          case 82: {
            OriginatorReplicaId = input.ReadString();
            break;
          }
          case 162: {
            if (valueMetadata_ == null) {
              ValueMetadata = new global::Fulcrum.ValueMetadata();
            }
            input.ReadMessage(ValueMetadata);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the KvMetadata message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("ACTIVE")] Active = 0,
        [pbr::OriginalName("DELETED")] Deleted = 1,
        /// <summary>
        ///    FAILURE             = 3;
        /// </summary>
        [pbr::OriginalName("EXPIRED")] Expired = 2,
      }

      public enum UpdateAction {
        [pbr::OriginalName("ADDED")] Added = 0,
        [pbr::OriginalName("UPDATED")] Updated = 1,
        [pbr::OriginalName("REPLICATED")] Replicated = 2,
      }

      public sealed partial class User : pb::IMessage<User> {
        private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<User> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Fulcrum.KvMetadata.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public User() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public User(User other) : this() {
          key_ = other.key_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public User Clone() {
          return new User(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private string key_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key {
          get { return key_; }
          set {
            key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as User);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(User other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key.Length != 0) hash ^= Key.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Key);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(User other) {
          if (other == null) {
            return;
          }
          if (other.Key.Length != 0) {
            Key = other.Key;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Key = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ValueEntry : pb::IMessage<ValueEntry> {
    private static readonly pb::MessageParser<ValueEntry> _parser = new pb::MessageParser<ValueEntry>(() => new ValueEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValueEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueEntry(ValueEntry other) : this() {
      keyUid_ = other.keyUid_ != null ? other.keyUid_.Clone() : null;
      switch (other.MessageCase) {
        case MessageOneofCase.I32:
          I32 = other.I32;
          break;
        case MessageOneofCase.I64:
          I64 = other.I64;
          break;
        case MessageOneofCase.Float:
          Float = other.Float;
          break;
        case MessageOneofCase.Double:
          Double = other.Double;
          break;
        case MessageOneofCase.Str:
          Str = other.Str;
          break;
        case MessageOneofCase.Bytes:
          Bytes = other.Bytes;
          break;
        case MessageOneofCase.Cdn:
          Cdn = other.Cdn.Clone();
          break;
        case MessageOneofCase.CdnStr:
          CdnStr = other.CdnStr.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueEntry Clone() {
      return new ValueEntry(this);
    }

    /// <summary>Field number for the "keyUid" field.</summary>
    public const int KeyUidFieldNumber = 1;
    private global::Fulcrum.KeyUid keyUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.KeyUid KeyUid {
      get { return keyUid_; }
      set {
        keyUid_ = value;
      }
    }

    /// <summary>Field number for the "i32" field.</summary>
    public const int I32FieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int I32 {
      get { return messageCase_ == MessageOneofCase.I32 ? (int) message_ : 0; }
      set {
        message_ = value;
        messageCase_ = MessageOneofCase.I32;
      }
    }

    /// <summary>Field number for the "i64" field.</summary>
    public const int I64FieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long I64 {
      get { return messageCase_ == MessageOneofCase.I64 ? (long) message_ : 0L; }
      set {
        message_ = value;
        messageCase_ = MessageOneofCase.I64;
      }
    }

    /// <summary>Field number for the "float" field.</summary>
    public const int FloatFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Float {
      get { return messageCase_ == MessageOneofCase.Float ? (float) message_ : 0F; }
      set {
        message_ = value;
        messageCase_ = MessageOneofCase.Float;
      }
    }

    /// <summary>Field number for the "double" field.</summary>
    public const int DoubleFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Double {
      get { return messageCase_ == MessageOneofCase.Double ? (double) message_ : 0D; }
      set {
        message_ = value;
        messageCase_ = MessageOneofCase.Double;
      }
    }

    /// <summary>Field number for the "str" field.</summary>
    public const int StrFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Str {
      get { return messageCase_ == MessageOneofCase.Str ? (string) message_ : ""; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        messageCase_ = MessageOneofCase.Str;
      }
    }

    /// <summary>Field number for the "bytes" field.</summary>
    public const int BytesFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Bytes {
      get { return messageCase_ == MessageOneofCase.Bytes ? (pb::ByteString) message_ : pb::ByteString.Empty; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        messageCase_ = MessageOneofCase.Bytes;
      }
    }

    /// <summary>Field number for the "cdn" field.</summary>
    public const int CdnFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.CdnUid Cdn {
      get { return messageCase_ == MessageOneofCase.Cdn ? (global::Fulcrum.CdnUid) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Cdn;
      }
    }

    /// <summary>Field number for the "cdnStr" field.</summary>
    public const int CdnStrFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.CdnUid CdnStr {
      get { return messageCase_ == MessageOneofCase.CdnStr ? (global::Fulcrum.CdnUid) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.CdnStr;
      }
    }

    private object message_;
    /// <summary>Enum of possible cases for the "message" oneof.</summary>
    public enum MessageOneofCase {
      None = 0,
      I32 = 2,
      I64 = 3,
      Float = 5,
      Double = 6,
      Str = 7,
      Bytes = 8,
      Cdn = 10,
      CdnStr = 11,
    }
    private MessageOneofCase messageCase_ = MessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageOneofCase MessageCase {
      get { return messageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      messageCase_ = MessageOneofCase.None;
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValueEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValueEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(KeyUid, other.KeyUid)) return false;
      if (I32 != other.I32) return false;
      if (I64 != other.I64) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Float, other.Float)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Double, other.Double)) return false;
      if (Str != other.Str) return false;
      if (Bytes != other.Bytes) return false;
      if (!object.Equals(Cdn, other.Cdn)) return false;
      if (!object.Equals(CdnStr, other.CdnStr)) return false;
      if (MessageCase != other.MessageCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (keyUid_ != null) hash ^= KeyUid.GetHashCode();
      if (messageCase_ == MessageOneofCase.I32) hash ^= I32.GetHashCode();
      if (messageCase_ == MessageOneofCase.I64) hash ^= I64.GetHashCode();
      if (messageCase_ == MessageOneofCase.Float) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Float);
      if (messageCase_ == MessageOneofCase.Double) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Double);
      if (messageCase_ == MessageOneofCase.Str) hash ^= Str.GetHashCode();
      if (messageCase_ == MessageOneofCase.Bytes) hash ^= Bytes.GetHashCode();
      if (messageCase_ == MessageOneofCase.Cdn) hash ^= Cdn.GetHashCode();
      if (messageCase_ == MessageOneofCase.CdnStr) hash ^= CdnStr.GetHashCode();
      hash ^= (int) messageCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (keyUid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(KeyUid);
      }
      if (messageCase_ == MessageOneofCase.I32) {
        output.WriteRawTag(16);
        output.WriteInt32(I32);
      }
      if (messageCase_ == MessageOneofCase.I64) {
        output.WriteRawTag(24);
        output.WriteInt64(I64);
      }
      if (messageCase_ == MessageOneofCase.Float) {
        output.WriteRawTag(45);
        output.WriteFloat(Float);
      }
      if (messageCase_ == MessageOneofCase.Double) {
        output.WriteRawTag(49);
        output.WriteDouble(Double);
      }
      if (messageCase_ == MessageOneofCase.Str) {
        output.WriteRawTag(58);
        output.WriteString(Str);
      }
      if (messageCase_ == MessageOneofCase.Bytes) {
        output.WriteRawTag(66);
        output.WriteBytes(Bytes);
      }
      if (messageCase_ == MessageOneofCase.Cdn) {
        output.WriteRawTag(82);
        output.WriteMessage(Cdn);
      }
      if (messageCase_ == MessageOneofCase.CdnStr) {
        output.WriteRawTag(90);
        output.WriteMessage(CdnStr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (keyUid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KeyUid);
      }
      if (messageCase_ == MessageOneofCase.I32) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(I32);
      }
      if (messageCase_ == MessageOneofCase.I64) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(I64);
      }
      if (messageCase_ == MessageOneofCase.Float) {
        size += 1 + 4;
      }
      if (messageCase_ == MessageOneofCase.Double) {
        size += 1 + 8;
      }
      if (messageCase_ == MessageOneofCase.Str) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Str);
      }
      if (messageCase_ == MessageOneofCase.Bytes) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bytes);
      }
      if (messageCase_ == MessageOneofCase.Cdn) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cdn);
      }
      if (messageCase_ == MessageOneofCase.CdnStr) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CdnStr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValueEntry other) {
      if (other == null) {
        return;
      }
      if (other.keyUid_ != null) {
        if (keyUid_ == null) {
          KeyUid = new global::Fulcrum.KeyUid();
        }
        KeyUid.MergeFrom(other.KeyUid);
      }
      switch (other.MessageCase) {
        case MessageOneofCase.I32:
          I32 = other.I32;
          break;
        case MessageOneofCase.I64:
          I64 = other.I64;
          break;
        case MessageOneofCase.Float:
          Float = other.Float;
          break;
        case MessageOneofCase.Double:
          Double = other.Double;
          break;
        case MessageOneofCase.Str:
          Str = other.Str;
          break;
        case MessageOneofCase.Bytes:
          Bytes = other.Bytes;
          break;
        case MessageOneofCase.Cdn:
          if (Cdn == null) {
            Cdn = new global::Fulcrum.CdnUid();
          }
          Cdn.MergeFrom(other.Cdn);
          break;
        case MessageOneofCase.CdnStr:
          if (CdnStr == null) {
            CdnStr = new global::Fulcrum.CdnUid();
          }
          CdnStr.MergeFrom(other.CdnStr);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (keyUid_ == null) {
              KeyUid = new global::Fulcrum.KeyUid();
            }
            input.ReadMessage(KeyUid);
            break;
          }
          case 16: {
            I32 = input.ReadInt32();
            break;
          }
          case 24: {
            I64 = input.ReadInt64();
            break;
          }
          case 45: {
            Float = input.ReadFloat();
            break;
          }
          case 49: {
            Double = input.ReadDouble();
            break;
          }
          case 58: {
            Str = input.ReadString();
            break;
          }
          case 66: {
            Bytes = input.ReadBytes();
            break;
          }
          case 82: {
            global::Fulcrum.CdnUid subBuilder = new global::Fulcrum.CdnUid();
            if (messageCase_ == MessageOneofCase.Cdn) {
              subBuilder.MergeFrom(Cdn);
            }
            input.ReadMessage(subBuilder);
            Cdn = subBuilder;
            break;
          }
          case 90: {
            global::Fulcrum.CdnUid subBuilder = new global::Fulcrum.CdnUid();
            if (messageCase_ == MessageOneofCase.CdnStr) {
              subBuilder.MergeFrom(CdnStr);
            }
            input.ReadMessage(subBuilder);
            CdnStr = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class KvEntry : pb::IMessage<KvEntry> {
    private static readonly pb::MessageParser<KvEntry> _parser = new pb::MessageParser<KvEntry>(() => new KvEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KvEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KvEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KvEntry(KvEntry other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      value_ = other.value_ != null ? other.value_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KvEntry Clone() {
      return new KvEntry(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::Fulcrum.KvMetadata metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.KvMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::Fulcrum.ValueEntry value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.ValueEntry Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KvEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KvEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KvEntry other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::Fulcrum.KvMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.value_ != null) {
        if (value_ == null) {
          Value = new global::Fulcrum.ValueEntry();
        }
        Value.MergeFrom(other.Value);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::Fulcrum.KvMetadata();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            if (value_ == null) {
              Value = new global::Fulcrum.ValueEntry();
            }
            input.ReadMessage(Value);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddRequest : pb::IMessage<AddRequest> {
    private static readonly pb::MessageParser<AddRequest> _parser = new pb::MessageParser<AddRequest>(() => new AddRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRequest(AddRequest other) : this() {
      key_ = other.key_ != null ? other.key_.Clone() : null;
      value_ = other.value_ != null ? other.value_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRequest Clone() {
      return new AddRequest(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::Fulcrum.Key key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.Key Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::Fulcrum.ValueEntry value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.ValueEntry Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddRequest other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          Key = new global::Fulcrum.Key();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.value_ != null) {
        if (value_ == null) {
          Value = new global::Fulcrum.ValueEntry();
        }
        Value.MergeFrom(other.Value);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (key_ == null) {
              Key = new global::Fulcrum.Key();
            }
            input.ReadMessage(Key);
            break;
          }
          case 18: {
            if (value_ == null) {
              Value = new global::Fulcrum.ValueEntry();
            }
            input.ReadMessage(Value);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddResponse : pb::IMessage<AddResponse> {
    private static readonly pb::MessageParser<AddResponse> _parser = new pb::MessageParser<AddResponse>(() => new AddResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddResponse(AddResponse other) : this() {
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success.Clone();
          break;
        case RespOneofCase.Exists:
          Exists = other.Exists.Clone();
          break;
        case RespOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddResponse Clone() {
      return new AddResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.Key Success {
      get { return respCase_ == RespOneofCase.Success ? (global::Fulcrum.Key) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Success;
      }
    }

    /// <summary>Field number for the "exists" field.</summary>
    public const int ExistsFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.Key Exists {
      get { return respCase_ == RespOneofCase.Exists ? (global::Fulcrum.Key) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Exists;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 100;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.InternalError Error {
      get { return respCase_ == RespOneofCase.Error ? (global::Fulcrum.InternalError) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Error;
      }
    }

    private object resp_;
    /// <summary>Enum of possible cases for the "Resp" oneof.</summary>
    public enum RespOneofCase {
      None = 0,
      Success = 1,
      Exists = 2,
      Error = 100,
    }
    private RespOneofCase respCase_ = RespOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespOneofCase RespCase {
      get { return respCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResp() {
      respCase_ = RespOneofCase.None;
      resp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Success, other.Success)) return false;
      if (!object.Equals(Exists, other.Exists)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (RespCase != other.RespCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (respCase_ == RespOneofCase.Success) hash ^= Success.GetHashCode();
      if (respCase_ == RespOneofCase.Exists) hash ^= Exists.GetHashCode();
      if (respCase_ == RespOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) respCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (respCase_ == RespOneofCase.Success) {
        output.WriteRawTag(10);
        output.WriteMessage(Success);
      }
      if (respCase_ == RespOneofCase.Exists) {
        output.WriteRawTag(18);
        output.WriteMessage(Exists);
      }
      if (respCase_ == RespOneofCase.Error) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (respCase_ == RespOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Success);
      }
      if (respCase_ == RespOneofCase.Exists) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Exists);
      }
      if (respCase_ == RespOneofCase.Error) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddResponse other) {
      if (other == null) {
        return;
      }
      switch (other.RespCase) {
        case RespOneofCase.Success:
          if (Success == null) {
            Success = new global::Fulcrum.Key();
          }
          Success.MergeFrom(other.Success);
          break;
        case RespOneofCase.Exists:
          if (Exists == null) {
            Exists = new global::Fulcrum.Key();
          }
          Exists.MergeFrom(other.Exists);
          break;
        case RespOneofCase.Error:
          if (Error == null) {
            Error = new global::Fulcrum.InternalError();
          }
          Error.MergeFrom(other.Error);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Fulcrum.Key subBuilder = new global::Fulcrum.Key();
            if (respCase_ == RespOneofCase.Success) {
              subBuilder.MergeFrom(Success);
            }
            input.ReadMessage(subBuilder);
            Success = subBuilder;
            break;
          }
          case 18: {
            global::Fulcrum.Key subBuilder = new global::Fulcrum.Key();
            if (respCase_ == RespOneofCase.Exists) {
              subBuilder.MergeFrom(Exists);
            }
            input.ReadMessage(subBuilder);
            Exists = subBuilder;
            break;
          }
          case 802: {
            global::Fulcrum.InternalError subBuilder = new global::Fulcrum.InternalError();
            if (respCase_ == RespOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteRequest : pb::IMessage<DeleteRequest> {
    private static readonly pb::MessageParser<DeleteRequest> _parser = new pb::MessageParser<DeleteRequest>(() => new DeleteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest(DeleteRequest other) : this() {
      key_ = other.key_ != null ? other.key_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest Clone() {
      return new DeleteRequest(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::Fulcrum.Key key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.Key Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          Key = new global::Fulcrum.Key();
        }
        Key.MergeFrom(other.Key);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (key_ == null) {
              Key = new global::Fulcrum.Key();
            }
            input.ReadMessage(Key);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteResponse : pb::IMessage<DeleteResponse> {
    private static readonly pb::MessageParser<DeleteResponse> _parser = new pb::MessageParser<DeleteResponse>(() => new DeleteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse(DeleteResponse other) : this() {
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success.Clone();
          break;
        case RespOneofCase.NotFound:
          NotFound = other.NotFound.Clone();
          break;
        case RespOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse Clone() {
      return new DeleteResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.KeyUid Success {
      get { return respCase_ == RespOneofCase.Success ? (global::Fulcrum.KeyUid) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Success;
      }
    }

    /// <summary>Field number for the "notFound" field.</summary>
    public const int NotFoundFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.KeyUid NotFound {
      get { return respCase_ == RespOneofCase.NotFound ? (global::Fulcrum.KeyUid) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.NotFound;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 100;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.InternalError Error {
      get { return respCase_ == RespOneofCase.Error ? (global::Fulcrum.InternalError) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Error;
      }
    }

    private object resp_;
    /// <summary>Enum of possible cases for the "Resp" oneof.</summary>
    public enum RespOneofCase {
      None = 0,
      Success = 1,
      NotFound = 2,
      Error = 100,
    }
    private RespOneofCase respCase_ = RespOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespOneofCase RespCase {
      get { return respCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResp() {
      respCase_ = RespOneofCase.None;
      resp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Success, other.Success)) return false;
      if (!object.Equals(NotFound, other.NotFound)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (RespCase != other.RespCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (respCase_ == RespOneofCase.Success) hash ^= Success.GetHashCode();
      if (respCase_ == RespOneofCase.NotFound) hash ^= NotFound.GetHashCode();
      if (respCase_ == RespOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) respCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (respCase_ == RespOneofCase.Success) {
        output.WriteRawTag(10);
        output.WriteMessage(Success);
      }
      if (respCase_ == RespOneofCase.NotFound) {
        output.WriteRawTag(18);
        output.WriteMessage(NotFound);
      }
      if (respCase_ == RespOneofCase.Error) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (respCase_ == RespOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Success);
      }
      if (respCase_ == RespOneofCase.NotFound) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotFound);
      }
      if (respCase_ == RespOneofCase.Error) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteResponse other) {
      if (other == null) {
        return;
      }
      switch (other.RespCase) {
        case RespOneofCase.Success:
          if (Success == null) {
            Success = new global::Fulcrum.KeyUid();
          }
          Success.MergeFrom(other.Success);
          break;
        case RespOneofCase.NotFound:
          if (NotFound == null) {
            NotFound = new global::Fulcrum.KeyUid();
          }
          NotFound.MergeFrom(other.NotFound);
          break;
        case RespOneofCase.Error:
          if (Error == null) {
            Error = new global::Fulcrum.InternalError();
          }
          Error.MergeFrom(other.Error);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Fulcrum.KeyUid subBuilder = new global::Fulcrum.KeyUid();
            if (respCase_ == RespOneofCase.Success) {
              subBuilder.MergeFrom(Success);
            }
            input.ReadMessage(subBuilder);
            Success = subBuilder;
            break;
          }
          case 18: {
            global::Fulcrum.KeyUid subBuilder = new global::Fulcrum.KeyUid();
            if (respCase_ == RespOneofCase.NotFound) {
              subBuilder.MergeFrom(NotFound);
            }
            input.ReadMessage(subBuilder);
            NotFound = subBuilder;
            break;
          }
          case 802: {
            global::Fulcrum.InternalError subBuilder = new global::Fulcrum.InternalError();
            if (respCase_ == RespOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class CopyRequest : pb::IMessage<CopyRequest> {
    private static readonly pb::MessageParser<CopyRequest> _parser = new pb::MessageParser<CopyRequest>(() => new CopyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CopyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyRequest(CopyRequest other) : this() {
      keyFrom_ = other.keyFrom_ != null ? other.keyFrom_.Clone() : null;
      expiry_ = other.expiry_ != null ? other.expiry_.Clone() : null;
      keyTo_ = other.keyTo_ != null ? other.keyTo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyRequest Clone() {
      return new CopyRequest(this);
    }

    /// <summary>Field number for the "keyFrom" field.</summary>
    public const int KeyFromFieldNumber = 1;
    private global::Fulcrum.Key keyFrom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.Key KeyFrom {
      get { return keyFrom_; }
      set {
        keyFrom_ = value;
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expiry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Expiry {
      get { return expiry_; }
      set {
        expiry_ = value;
      }
    }

    /// <summary>Field number for the "keyTo" field.</summary>
    public const int KeyToFieldNumber = 3;
    private global::Fulcrum.Key keyTo_;
    /// <summary>
    /// string correlationId              = 2;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.Key KeyTo {
      get { return keyTo_; }
      set {
        keyTo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CopyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CopyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(KeyFrom, other.KeyFrom)) return false;
      if (!object.Equals(Expiry, other.Expiry)) return false;
      if (!object.Equals(KeyTo, other.KeyTo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (keyFrom_ != null) hash ^= KeyFrom.GetHashCode();
      if (expiry_ != null) hash ^= Expiry.GetHashCode();
      if (keyTo_ != null) hash ^= KeyTo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (keyFrom_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(KeyFrom);
      }
      if (expiry_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Expiry);
      }
      if (keyTo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(KeyTo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (keyFrom_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KeyFrom);
      }
      if (expiry_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expiry);
      }
      if (keyTo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KeyTo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CopyRequest other) {
      if (other == null) {
        return;
      }
      if (other.keyFrom_ != null) {
        if (keyFrom_ == null) {
          KeyFrom = new global::Fulcrum.Key();
        }
        KeyFrom.MergeFrom(other.KeyFrom);
      }
      if (other.expiry_ != null) {
        if (expiry_ == null) {
          Expiry = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Expiry.MergeFrom(other.Expiry);
      }
      if (other.keyTo_ != null) {
        if (keyTo_ == null) {
          KeyTo = new global::Fulcrum.Key();
        }
        KeyTo.MergeFrom(other.KeyTo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (keyFrom_ == null) {
              KeyFrom = new global::Fulcrum.Key();
            }
            input.ReadMessage(KeyFrom);
            break;
          }
          case 18: {
            if (expiry_ == null) {
              Expiry = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Expiry);
            break;
          }
          case 26: {
            if (keyTo_ == null) {
              KeyTo = new global::Fulcrum.Key();
            }
            input.ReadMessage(KeyTo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CopyResponse : pb::IMessage<CopyResponse> {
    private static readonly pb::MessageParser<CopyResponse> _parser = new pb::MessageParser<CopyResponse>(() => new CopyResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CopyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyResponse(CopyResponse other) : this() {
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success.Clone();
          break;
        case RespOneofCase.FromKeyNotFound:
          FromKeyNotFound = other.FromKeyNotFound.Clone();
          break;
        case RespOneofCase.ToKeyExists:
          ToKeyExists = other.ToKeyExists.Clone();
          break;
        case RespOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyResponse Clone() {
      return new CopyResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.CopyRequest Success {
      get { return respCase_ == RespOneofCase.Success ? (global::Fulcrum.CopyRequest) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Success;
      }
    }

    /// <summary>Field number for the "fromKeyNotFound" field.</summary>
    public const int FromKeyNotFoundFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.CopyRequest FromKeyNotFound {
      get { return respCase_ == RespOneofCase.FromKeyNotFound ? (global::Fulcrum.CopyRequest) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.FromKeyNotFound;
      }
    }

    /// <summary>Field number for the "toKeyExists" field.</summary>
    public const int ToKeyExistsFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.CopyRequest ToKeyExists {
      get { return respCase_ == RespOneofCase.ToKeyExists ? (global::Fulcrum.CopyRequest) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.ToKeyExists;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 100;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.InternalError Error {
      get { return respCase_ == RespOneofCase.Error ? (global::Fulcrum.InternalError) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Error;
      }
    }

    private object resp_;
    /// <summary>Enum of possible cases for the "Resp" oneof.</summary>
    public enum RespOneofCase {
      None = 0,
      Success = 1,
      FromKeyNotFound = 2,
      ToKeyExists = 3,
      Error = 100,
    }
    private RespOneofCase respCase_ = RespOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespOneofCase RespCase {
      get { return respCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResp() {
      respCase_ = RespOneofCase.None;
      resp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CopyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CopyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Success, other.Success)) return false;
      if (!object.Equals(FromKeyNotFound, other.FromKeyNotFound)) return false;
      if (!object.Equals(ToKeyExists, other.ToKeyExists)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (RespCase != other.RespCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (respCase_ == RespOneofCase.Success) hash ^= Success.GetHashCode();
      if (respCase_ == RespOneofCase.FromKeyNotFound) hash ^= FromKeyNotFound.GetHashCode();
      if (respCase_ == RespOneofCase.ToKeyExists) hash ^= ToKeyExists.GetHashCode();
      if (respCase_ == RespOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) respCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (respCase_ == RespOneofCase.Success) {
        output.WriteRawTag(10);
        output.WriteMessage(Success);
      }
      if (respCase_ == RespOneofCase.FromKeyNotFound) {
        output.WriteRawTag(18);
        output.WriteMessage(FromKeyNotFound);
      }
      if (respCase_ == RespOneofCase.ToKeyExists) {
        output.WriteRawTag(26);
        output.WriteMessage(ToKeyExists);
      }
      if (respCase_ == RespOneofCase.Error) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (respCase_ == RespOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Success);
      }
      if (respCase_ == RespOneofCase.FromKeyNotFound) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromKeyNotFound);
      }
      if (respCase_ == RespOneofCase.ToKeyExists) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ToKeyExists);
      }
      if (respCase_ == RespOneofCase.Error) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CopyResponse other) {
      if (other == null) {
        return;
      }
      switch (other.RespCase) {
        case RespOneofCase.Success:
          if (Success == null) {
            Success = new global::Fulcrum.CopyRequest();
          }
          Success.MergeFrom(other.Success);
          break;
        case RespOneofCase.FromKeyNotFound:
          if (FromKeyNotFound == null) {
            FromKeyNotFound = new global::Fulcrum.CopyRequest();
          }
          FromKeyNotFound.MergeFrom(other.FromKeyNotFound);
          break;
        case RespOneofCase.ToKeyExists:
          if (ToKeyExists == null) {
            ToKeyExists = new global::Fulcrum.CopyRequest();
          }
          ToKeyExists.MergeFrom(other.ToKeyExists);
          break;
        case RespOneofCase.Error:
          if (Error == null) {
            Error = new global::Fulcrum.InternalError();
          }
          Error.MergeFrom(other.Error);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Fulcrum.CopyRequest subBuilder = new global::Fulcrum.CopyRequest();
            if (respCase_ == RespOneofCase.Success) {
              subBuilder.MergeFrom(Success);
            }
            input.ReadMessage(subBuilder);
            Success = subBuilder;
            break;
          }
          case 18: {
            global::Fulcrum.CopyRequest subBuilder = new global::Fulcrum.CopyRequest();
            if (respCase_ == RespOneofCase.FromKeyNotFound) {
              subBuilder.MergeFrom(FromKeyNotFound);
            }
            input.ReadMessage(subBuilder);
            FromKeyNotFound = subBuilder;
            break;
          }
          case 26: {
            global::Fulcrum.CopyRequest subBuilder = new global::Fulcrum.CopyRequest();
            if (respCase_ == RespOneofCase.ToKeyExists) {
              subBuilder.MergeFrom(ToKeyExists);
            }
            input.ReadMessage(subBuilder);
            ToKeyExists = subBuilder;
            break;
          }
          case 802: {
            global::Fulcrum.InternalError subBuilder = new global::Fulcrum.InternalError();
            if (respCase_ == RespOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRequest : pb::IMessage<GetRequest> {
    private static readonly pb::MessageParser<GetRequest> _parser = new pb::MessageParser<GetRequest>(() => new GetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRequest(GetRequest other) : this() {
      key_ = other.key_ != null ? other.key_.Clone() : null;
      returnMetadata_ = other.returnMetadata_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRequest Clone() {
      return new GetRequest(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::Fulcrum.Key key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.Key Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "returnMetadata" field.</summary>
    public const int ReturnMetadataFieldNumber = 2;
    private bool returnMetadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReturnMetadata {
      get { return returnMetadata_; }
      set {
        returnMetadata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (ReturnMetadata != other.ReturnMetadata) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (ReturnMetadata != false) hash ^= ReturnMetadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (ReturnMetadata != false) {
        output.WriteRawTag(16);
        output.WriteBool(ReturnMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (ReturnMetadata != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRequest other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          Key = new global::Fulcrum.Key();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.ReturnMetadata != false) {
        ReturnMetadata = other.ReturnMetadata;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (key_ == null) {
              Key = new global::Fulcrum.Key();
            }
            input.ReadMessage(Key);
            break;
          }
          case 16: {
            ReturnMetadata = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetResponse : pb::IMessage<GetResponse> {
    private static readonly pb::MessageParser<GetResponse> _parser = new pb::MessageParser<GetResponse>(() => new GetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetResponse(GetResponse other) : this() {
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success.Clone();
          break;
        case RespOneofCase.NotFound:
          NotFound = other.NotFound.Clone();
          break;
        case RespOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetResponse Clone() {
      return new GetResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.KvEntry Success {
      get { return respCase_ == RespOneofCase.Success ? (global::Fulcrum.KvEntry) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Success;
      }
    }

    /// <summary>Field number for the "notFound" field.</summary>
    public const int NotFoundFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.KeyUid NotFound {
      get { return respCase_ == RespOneofCase.NotFound ? (global::Fulcrum.KeyUid) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.NotFound;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 100;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.InternalError Error {
      get { return respCase_ == RespOneofCase.Error ? (global::Fulcrum.InternalError) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Error;
      }
    }

    private object resp_;
    /// <summary>Enum of possible cases for the "Resp" oneof.</summary>
    public enum RespOneofCase {
      None = 0,
      Success = 1,
      NotFound = 2,
      Error = 100,
    }
    private RespOneofCase respCase_ = RespOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespOneofCase RespCase {
      get { return respCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResp() {
      respCase_ = RespOneofCase.None;
      resp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Success, other.Success)) return false;
      if (!object.Equals(NotFound, other.NotFound)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (RespCase != other.RespCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (respCase_ == RespOneofCase.Success) hash ^= Success.GetHashCode();
      if (respCase_ == RespOneofCase.NotFound) hash ^= NotFound.GetHashCode();
      if (respCase_ == RespOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) respCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (respCase_ == RespOneofCase.Success) {
        output.WriteRawTag(10);
        output.WriteMessage(Success);
      }
      if (respCase_ == RespOneofCase.NotFound) {
        output.WriteRawTag(18);
        output.WriteMessage(NotFound);
      }
      if (respCase_ == RespOneofCase.Error) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (respCase_ == RespOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Success);
      }
      if (respCase_ == RespOneofCase.NotFound) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotFound);
      }
      if (respCase_ == RespOneofCase.Error) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetResponse other) {
      if (other == null) {
        return;
      }
      switch (other.RespCase) {
        case RespOneofCase.Success:
          if (Success == null) {
            Success = new global::Fulcrum.KvEntry();
          }
          Success.MergeFrom(other.Success);
          break;
        case RespOneofCase.NotFound:
          if (NotFound == null) {
            NotFound = new global::Fulcrum.KeyUid();
          }
          NotFound.MergeFrom(other.NotFound);
          break;
        case RespOneofCase.Error:
          if (Error == null) {
            Error = new global::Fulcrum.InternalError();
          }
          Error.MergeFrom(other.Error);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Fulcrum.KvEntry subBuilder = new global::Fulcrum.KvEntry();
            if (respCase_ == RespOneofCase.Success) {
              subBuilder.MergeFrom(Success);
            }
            input.ReadMessage(subBuilder);
            Success = subBuilder;
            break;
          }
          case 18: {
            global::Fulcrum.KeyUid subBuilder = new global::Fulcrum.KeyUid();
            if (respCase_ == RespOneofCase.NotFound) {
              subBuilder.MergeFrom(NotFound);
            }
            input.ReadMessage(subBuilder);
            NotFound = subBuilder;
            break;
          }
          case 802: {
            global::Fulcrum.InternalError subBuilder = new global::Fulcrum.InternalError();
            if (respCase_ == RespOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContainsRequest : pb::IMessage<ContainsRequest> {
    private static readonly pb::MessageParser<ContainsRequest> _parser = new pb::MessageParser<ContainsRequest>(() => new ContainsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContainsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContainsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContainsRequest(ContainsRequest other) : this() {
      key_ = other.key_ != null ? other.key_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContainsRequest Clone() {
      return new ContainsRequest(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::Fulcrum.Key key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.Key Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContainsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContainsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContainsRequest other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          Key = new global::Fulcrum.Key();
        }
        Key.MergeFrom(other.Key);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (key_ == null) {
              Key = new global::Fulcrum.Key();
            }
            input.ReadMessage(Key);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContainsResponse : pb::IMessage<ContainsResponse> {
    private static readonly pb::MessageParser<ContainsResponse> _parser = new pb::MessageParser<ContainsResponse>(() => new ContainsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContainsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContainsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContainsResponse(ContainsResponse other) : this() {
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success;
          break;
        case RespOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContainsResponse Clone() {
      return new ContainsResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return respCase_ == RespOneofCase.Success ? (bool) resp_ : false; }
      set {
        resp_ = value;
        respCase_ = RespOneofCase.Success;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 100;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.InternalError Error {
      get { return respCase_ == RespOneofCase.Error ? (global::Fulcrum.InternalError) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Error;
      }
    }

    private object resp_;
    /// <summary>Enum of possible cases for the "Resp" oneof.</summary>
    public enum RespOneofCase {
      None = 0,
      Success = 1,
      Error = 100,
    }
    private RespOneofCase respCase_ = RespOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespOneofCase RespCase {
      get { return respCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResp() {
      respCase_ = RespOneofCase.None;
      resp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContainsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContainsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (RespCase != other.RespCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (respCase_ == RespOneofCase.Success) hash ^= Success.GetHashCode();
      if (respCase_ == RespOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) respCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (respCase_ == RespOneofCase.Success) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (respCase_ == RespOneofCase.Error) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (respCase_ == RespOneofCase.Success) {
        size += 1 + 1;
      }
      if (respCase_ == RespOneofCase.Error) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContainsResponse other) {
      if (other == null) {
        return;
      }
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success;
          break;
        case RespOneofCase.Error:
          if (Error == null) {
            Error = new global::Fulcrum.InternalError();
          }
          Error.MergeFrom(other.Error);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 802: {
            global::Fulcrum.InternalError subBuilder = new global::Fulcrum.InternalError();
            if (respCase_ == RespOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchRequest : pb::IMessage<SearchRequest> {
    private static readonly pb::MessageParser<SearchRequest> _parser = new pb::MessageParser<SearchRequest>(() => new SearchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchRequest(SearchRequest other) : this() {
      keyPrefix_ = other.keyPrefix_;
      pageSize_ = other.pageSize_;
      page_ = other.page_;
      returnUid_ = other.returnUid_;
      returnValue_ = other.returnValue_;
      returnMetadata_ = other.returnMetadata_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchRequest Clone() {
      return new SearchRequest(this);
    }

    /// <summary>Field number for the "keyPrefix" field.</summary>
    public const int KeyPrefixFieldNumber = 1;
    private string keyPrefix_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyPrefix {
      get { return keyPrefix_; }
      set {
        keyPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private uint pageSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 3;
    private uint page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    /// <summary>Field number for the "returnUid" field.</summary>
    public const int ReturnUidFieldNumber = 4;
    private bool returnUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReturnUid {
      get { return returnUid_; }
      set {
        returnUid_ = value;
      }
    }

    /// <summary>Field number for the "returnValue" field.</summary>
    public const int ReturnValueFieldNumber = 5;
    private bool returnValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReturnValue {
      get { return returnValue_; }
      set {
        returnValue_ = value;
      }
    }

    /// <summary>Field number for the "returnMetadata" field.</summary>
    public const int ReturnMetadataFieldNumber = 6;
    private bool returnMetadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReturnMetadata {
      get { return returnMetadata_; }
      set {
        returnMetadata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyPrefix != other.KeyPrefix) return false;
      if (PageSize != other.PageSize) return false;
      if (Page != other.Page) return false;
      if (ReturnUid != other.ReturnUid) return false;
      if (ReturnValue != other.ReturnValue) return false;
      if (ReturnMetadata != other.ReturnMetadata) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyPrefix.Length != 0) hash ^= KeyPrefix.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (Page != 0) hash ^= Page.GetHashCode();
      if (ReturnUid != false) hash ^= ReturnUid.GetHashCode();
      if (ReturnValue != false) hash ^= ReturnValue.GetHashCode();
      if (ReturnMetadata != false) hash ^= ReturnMetadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyPrefix.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KeyPrefix);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PageSize);
      }
      if (Page != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Page);
      }
      if (ReturnUid != false) {
        output.WriteRawTag(32);
        output.WriteBool(ReturnUid);
      }
      if (ReturnValue != false) {
        output.WriteRawTag(40);
        output.WriteBool(ReturnValue);
      }
      if (ReturnMetadata != false) {
        output.WriteRawTag(48);
        output.WriteBool(ReturnMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyPrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyPrefix);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PageSize);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Page);
      }
      if (ReturnUid != false) {
        size += 1 + 1;
      }
      if (ReturnValue != false) {
        size += 1 + 1;
      }
      if (ReturnMetadata != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchRequest other) {
      if (other == null) {
        return;
      }
      if (other.KeyPrefix.Length != 0) {
        KeyPrefix = other.KeyPrefix;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.Page != 0) {
        Page = other.Page;
      }
      if (other.ReturnUid != false) {
        ReturnUid = other.ReturnUid;
      }
      if (other.ReturnValue != false) {
        ReturnValue = other.ReturnValue;
      }
      if (other.ReturnMetadata != false) {
        ReturnMetadata = other.ReturnMetadata;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KeyPrefix = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadUInt32();
            break;
          }
          case 24: {
            Page = input.ReadUInt32();
            break;
          }
          case 32: {
            ReturnUid = input.ReadBool();
            break;
          }
          case 40: {
            ReturnValue = input.ReadBool();
            break;
          }
          case 48: {
            ReturnMetadata = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchResponseItem : pb::IMessage<SearchResponseItem> {
    private static readonly pb::MessageParser<SearchResponseItem> _parser = new pb::MessageParser<SearchResponseItem>(() => new SearchResponseItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchResponseItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchResponseItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchResponseItem(SearchResponseItem other) : this() {
      key_ = other.key_ != null ? other.key_.Clone() : null;
      value_ = other.value_ != null ? other.value_.Clone() : null;
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchResponseItem Clone() {
      return new SearchResponseItem(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::Fulcrum.Key key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.Key Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::Fulcrum.ValueEntry value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.ValueEntry Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 3;
    private global::Fulcrum.KvMetadata metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.KvMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchResponseItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchResponseItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (!object.Equals(Value, other.Value)) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      if (metadata_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Metadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchResponseItem other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          Key = new global::Fulcrum.Key();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.value_ != null) {
        if (value_ == null) {
          Value = new global::Fulcrum.ValueEntry();
        }
        Value.MergeFrom(other.Value);
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::Fulcrum.KvMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (key_ == null) {
              Key = new global::Fulcrum.Key();
            }
            input.ReadMessage(Key);
            break;
          }
          case 18: {
            if (value_ == null) {
              Value = new global::Fulcrum.ValueEntry();
            }
            input.ReadMessage(Value);
            break;
          }
          case 26: {
            if (metadata_ == null) {
              Metadata = new global::Fulcrum.KvMetadata();
            }
            input.ReadMessage(Metadata);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchResponse : pb::IMessage<SearchResponse> {
    private static readonly pb::MessageParser<SearchResponse> _parser = new pb::MessageParser<SearchResponse>(() => new SearchResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fulcrum.FulcrumReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchResponse(SearchResponse other) : this() {
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success.Clone();
          break;
        case RespOneofCase.KeyError:
          KeyError = other.KeyError.Clone();
          break;
        case RespOneofCase.ValueError:
          ValueError = other.ValueError.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchResponse Clone() {
      return new SearchResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.SearchResponseItem Success {
      get { return respCase_ == RespOneofCase.Success ? (global::Fulcrum.SearchResponseItem) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Success;
      }
    }

    /// <summary>Field number for the "keyError" field.</summary>
    public const int KeyErrorFieldNumber = 100;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.InternalError KeyError {
      get { return respCase_ == RespOneofCase.KeyError ? (global::Fulcrum.InternalError) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.KeyError;
      }
    }

    /// <summary>Field number for the "valueError" field.</summary>
    public const int ValueErrorFieldNumber = 101;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fulcrum.InternalError ValueError {
      get { return respCase_ == RespOneofCase.ValueError ? (global::Fulcrum.InternalError) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.ValueError;
      }
    }

    private object resp_;
    /// <summary>Enum of possible cases for the "Resp" oneof.</summary>
    public enum RespOneofCase {
      None = 0,
      Success = 1,
      KeyError = 100,
      ValueError = 101,
    }
    private RespOneofCase respCase_ = RespOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespOneofCase RespCase {
      get { return respCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResp() {
      respCase_ = RespOneofCase.None;
      resp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Success, other.Success)) return false;
      if (!object.Equals(KeyError, other.KeyError)) return false;
      if (!object.Equals(ValueError, other.ValueError)) return false;
      if (RespCase != other.RespCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (respCase_ == RespOneofCase.Success) hash ^= Success.GetHashCode();
      if (respCase_ == RespOneofCase.KeyError) hash ^= KeyError.GetHashCode();
      if (respCase_ == RespOneofCase.ValueError) hash ^= ValueError.GetHashCode();
      hash ^= (int) respCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (respCase_ == RespOneofCase.Success) {
        output.WriteRawTag(10);
        output.WriteMessage(Success);
      }
      if (respCase_ == RespOneofCase.KeyError) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(KeyError);
      }
      if (respCase_ == RespOneofCase.ValueError) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(ValueError);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (respCase_ == RespOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Success);
      }
      if (respCase_ == RespOneofCase.KeyError) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(KeyError);
      }
      if (respCase_ == RespOneofCase.ValueError) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ValueError);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchResponse other) {
      if (other == null) {
        return;
      }
      switch (other.RespCase) {
        case RespOneofCase.Success:
          if (Success == null) {
            Success = new global::Fulcrum.SearchResponseItem();
          }
          Success.MergeFrom(other.Success);
          break;
        case RespOneofCase.KeyError:
          if (KeyError == null) {
            KeyError = new global::Fulcrum.InternalError();
          }
          KeyError.MergeFrom(other.KeyError);
          break;
        case RespOneofCase.ValueError:
          if (ValueError == null) {
            ValueError = new global::Fulcrum.InternalError();
          }
          ValueError.MergeFrom(other.ValueError);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Fulcrum.SearchResponseItem subBuilder = new global::Fulcrum.SearchResponseItem();
            if (respCase_ == RespOneofCase.Success) {
              subBuilder.MergeFrom(Success);
            }
            input.ReadMessage(subBuilder);
            Success = subBuilder;
            break;
          }
          case 802: {
            global::Fulcrum.InternalError subBuilder = new global::Fulcrum.InternalError();
            if (respCase_ == RespOneofCase.KeyError) {
              subBuilder.MergeFrom(KeyError);
            }
            input.ReadMessage(subBuilder);
            KeyError = subBuilder;
            break;
          }
          case 810: {
            global::Fulcrum.InternalError subBuilder = new global::Fulcrum.InternalError();
            if (respCase_ == RespOneofCase.ValueError) {
              subBuilder.MergeFrom(ValueError);
            }
            input.ReadMessage(subBuilder);
            ValueError = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
